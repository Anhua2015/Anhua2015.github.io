<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c/c++ const关键字</title>
      <link href="/2019/12/15/cc-const/"/>
      <url>/2019/12/15/cc-const/</url>
      
        <content type="html"><![CDATA[<h2 id="C-C-语言中const关键字"><a href="#C-C-语言中const关键字" class="headerlink" title="C/C++语言中const关键字"></a>C/C++语言中const关键字</h2><p>  在C语言和C++中经常要用到const关键字，最简单的用法是使用它定义常量，如果一个变量被const修饰，那么它的值就不能再被改变。这是const关键字最根本的功能。既然用它定义的变量不可变，那么他与#define有什么区别呢？</p><ol><li>const关键字定义的变量在堆栈中分配了空间，const修饰的常量是一个Run-Time的概念，变量在程序中确确实实的存在，可以被调用、传递。</li><li>#define只是在编译时只是对值简单的替换，不能进行类型检查，它是Compile-Time概念，他的生命周期止于编译器。</li><li>const可以保护被修饰的东西，防止恶意篡改。</li><li>具体不同的编译器存在一些差别。</li></ol><h3 id="一、修饰局部变量"><a href="#一、修饰局部变量" class="headerlink" title="一、修饰局部变量"></a>一、修饰局部变量</h3><pre><code>const int n = 5;int const n = 5;</code></pre><p> 上述两种写法完全一致，表示变量n定义完成后，不能再被修改，需要注意的是在使用const修饰变量时，一定要对变量进行初始化，否则之后就不能对其进行赋值了。<br> 在全局作用域里定义非const变量时，它在整个程序中都可以访问。如下所示：</p><pre><code>//file_1.cint counter; //definition//file_2.cextern int counter; //uses counter from file_1counter++; //increments counter defined in file_1</code></pre><p> 与其他变量不同，除非特别说明，在全局作用域声明的const变量是定义该对象的文件的局部变量。此变量只存在于那个文件当中，不能被其他文件访问。<br> 通过指定const变量为extern，就可以在整个程序中访问const对象。如下所示：</p><pre><code>//file_1.c//defines and initializes a const that is accessible to other filesextern const int bufSize = fcn();file_2.cextern const int bufSize;//uses bufSize from file_1</code></pre><p> 由此可知，非const变量默认为extern。要使const变量能够在其他文件中访问，必须显式地指定它为extern。</p><h3 id="二、const引用"><a href="#二、const引用" class="headerlink" title="二、const引用"></a>二、const引用</h3><p>const引用是指向const对象的引用：</p><pre><code>const int ival = 1024;const int &amp;refVal = ival;//ok,both reference and object are constint &amp;ref2 = ival; //error,nonconst reference to a const object</code></pre><p> 可以读取refVal但不能修改，因此，任何对refVal的修改都是不合法的。使用ival初始化ref2是不合法的，因为ref2是普通的非const引用。<br> 严格来说，“const引用”的意思是“指向const对象的引用”。“非const引用”表示指向非const类型的引用。<br> const引用可以初始化为不同类型的对象或者初始化为右值，如字面值常量：</p><pre><code>int i = 42;const int &amp;r = 42;const int &amp;r2 = r + i;</code></pre><p> 同样的初始化对于非const引用却是不合法的，而且会导致编译时错误。 </p><p> 观察将引用绑定到不同的类型时所发生的事情，最容易理解上述行为。加入我们编写：</p><pre><code>double dval = 3.14;const int &amp;ri = dval;</code></pre><p>编译器会把这些代码转化成如下：</p><pre><code>int temp = dval;const int &amp;ri = temp;</code></pre><p> 如果ri不是const，那么可以给ri赋一个新值。这样做不会修改dval，而是修改了temp。期望对ri的赋值会修改dval的程序员会发现dval并没有被修改。所以仅允许const引用绑定到需要临时使用的值完全避免了这个问题，因为const引用是只读的。</p><p>注解：</p><ol><li>非const引用只能绑定到与该引用同类型的对象。</li><li>const引用则可以绑定到不同但相关的类型的对象或绑定到右值。</li></ol><h3 id="三、指针和const限定符"><a href="#三、指针和const限定符" class="headerlink" title="三、指针和const限定符"></a>三、指针和const限定符</h3><h4 id="指向const对象的指针"><a href="#指向const对象的指针" class="headerlink" title="指向const对象的指针"></a>指向const对象的指针</h4><p> 指针可以用来修改其所指对象的值。但如果指针指向const对象，则不允许用指针来改变其所指向的const值。为了保证这个特性，c++语言强制要求指向const对象的指针也必须具有const特性：</p><pre><code>const double *cptr; //cptr may point to a double that is const</code></pre><p> 这里的cptr是一个指向double类型const对象的指针，<strong>const限定了cptr指针所指向的对象类型，而非cptr本身</strong>。<br>也就是说，cptr本身并不是const，在定义时不需要对他进行初始化，如果需要的话，允许给cptr从新赋值，使其指向另一个const对象。但不能通过cptr修改其所指向对象的值。<br> 把一个const对象的地址赋给一个普通的、非const对象的指针也会导致编译时的错误。</p><pre><code>const double pi = 3.14;double *ptr = &amp;pi; //error: ptr is a plain pointerconst double *cptr = &amp;pi; //ok:cptr is a pointer to const</code></pre><p> 不能使用void *指针保存const对象的地址，而必须使用const void *类型的指针保存const对象的地址：</p><pre><code>const int universe = 42;const void *cpv = &amp;universe; //okvoid *pv = &amp;universe; //error</code></pre><p> 允许把非const对象的地址赋给指向const对象的指针，例如：</p><pre><code>double dval = 3.14;const double cptr = &amp;dval;</code></pre><p>尽管dval不是const对象，但任何企图通过指针cptr修改其值的性唯都会导致编译时的错误。cptr一经定义，就不允许修改其所指对象的值。在实际的程序中，指向const的指针常用作函数的形参。将形参定义为指向const的指针，以此确保传递给函数的实际对象在函数中不因为形参而被修改。  </p><h4 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h4><p>除了指向const对象的的指针外，c++语言还提供了const指针—本身的值不能被修改。  </p><pre><code>int errNumb = 0;int *const curErr = &amp;errNumb; //curErr is a constant pointer</code></pre><p>const指针的值不能修改，这就意味着不能使curErr指向其他对象。</p><h4 id="指向const对象的const指针"><a href="#指向const对象的const指针" class="headerlink" title="指向const对象的const指针"></a>指向const对象的const指针</h4><p>知道了上面的两个概念，那么我们还可以如下定义指向const对象的const指针。</p><pre><code>const double pi = 3.14159;const double *const pi_ptr = &amp;pi;</code></pre><p>本例中，既不能修改pi_ptr所指向对象的值，也不允许修改该指针的指向。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>《C++ Primer》</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ const关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub高级检索</title>
      <link href="/2019/12/06/githubSearch/"/>
      <url>/2019/12/06/githubSearch/</url>
      
        <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>​    GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。GitHub对广大的开发者来说是个巨大的宝库，在GitHub上我们可以学习众多大佬优秀的思想以及他们所建造的轮子，同时也可以记录和分享自己的技术和经验。想要更好的使用GitHub这个宝库，那么学会GitHub的高级检索功能就显得至关重要。</p><p>GitHub官方文档： <a href="https://help.github.com/categories/search/" target="_blank" rel="noopener">github帮助页面</a></p><h3 id="官方文档摘抄"><a href="#官方文档摘抄" class="headerlink" title="官方文档摘抄"></a>官方文档摘抄</h3><p><strong>About searching on GitHub</strong><br>Use our powerful search tools to find what you’re looking for among the many repositories, users, and lines of code on GitHub.</p><h4 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h4><p><strong>Searching for repositories</strong><br>You can search for repositories on GitHub and narrow the results using these repository search qualifiers in any combination.</p><table><thead><tr><th>Qualifier</th><th>Example</th></tr></thead><tbody><tr><td><u>in:name</u></td><td>jquery in:name matches repositories with “jquery” in their name.</td></tr><tr><td><u>in:description</u></td><td>jquery in:name,description matches repositories with “jquery” in their name or description.</td></tr><tr><td><u>in:readme</u></td><td>jquery in:readme matches repositories mentioning “jquery” in their README file.</td></tr><tr><td>repo:owner/name</td><td>repo:octocat/hello-world matches a specific repository name.</td></tr><tr><td>user:USERNAME</td><td>user:defunkt forks:&gt;100 matches repositories from @defunkt that have more than 100 forks.</td></tr><tr><td>org:ORGNAME</td><td>org:github matches repositories from GitHub.</td></tr><tr><td>size:n</td><td>size:1000 matches repositories that are 1 MB exactly.size:&gt;=30000 matches repositories that are at least 30 MB.size:&lt;50 matches repositories that are smaller than 50 KB.size:50..120 matches repositories that are between 50 KB and 120 KB.</td></tr><tr><td>followers:n</td><td>node followers:&gt;=10000 matches repositories with 10,000 or more followers mentioning the word “node”. styleguide linter followers:1..10 matches repositories with between 1 and 10 followers, mentioning the word “styleguide linter.”</td></tr><tr><td>forks:n</td><td>forks:5 matches repositories with only five forks.forks:&gt;=205 matches repositories with at least 205 forks.forks:&lt;90 matches repositories with fewer than 90 forks.forks:10..20 matches repositories with 10 to 20 forks.</td></tr><tr><td>stars:n</td><td>stars:500 matches repositories with exactly 500 stars.stars:10..20 matches repositories 10 to 20 stars, that are smaller than 1000 KB.stars:&gt;=500 fork:true language:php matches repositories with the at least 500 stars, including forked ones, that are written in PHP.</td></tr><tr><td>created:YYYY-MM-DD</td><td>webos created:&lt;2011-01-01 matches repositories with the word “webos” that were created before 2011.</td></tr><tr><td>pushed:YYYY-MM-DD</td><td>css pushed:&gt;2013-02-01 matches repositories with the word “css” that were pushed to after January 2013.case pushed:&gt;=2013-03-06 fork:only matches repositories with the word “case” that were pushed to on or after March 6th, 2013, and that are forks.</td></tr><tr><td>language:LANGUAGE</td><td>rails language:javascript matches repositories with the word “rails” that are written in JavaScript.</td></tr><tr><td>topic:TOPIC</td><td>topic:jekyll matches repositories that have been classified with the topic “jekyll.”</td></tr><tr><td>topics:n</td><td>topics:5 matches repositories that have five topics.topics:&gt;3 matches repositories that have more than three topics.</td></tr><tr><td>license:LICENSE_KEYWORD</td><td>license:apache-2.0 matches repositories that are licensed under Apache License 2.0.</td></tr><tr><td>is:public</td><td>is:public org:github matches repositories owned by GitHub that are public.</td></tr><tr><td>is:private</td><td>is:private pages matches private repositories you have access to and that contain the word “pages.”</td></tr><tr><td>mirror:true</td><td>mirror:true GNOME matches repositories that are mirrors and contain the word “GNOME.”</td></tr><tr><td>mirror:false</td><td>mirror:false GNOME matches repositories that are not mirrors and contain the word “GNOME.”</td></tr><tr><td>archived:true</td><td>archived:true GNOME matches repositories that are archived and contain the word “GNOME.”</td></tr><tr><td>archived:false</td><td>archived:false GNOME matches repositories that are not archived and contain the word “GNOME.”</td></tr><tr><td>good-first-issues:&gt;n</td><td>good-first-issues:&gt;2 javascript matches repositories with more than two issues labeled good-first-issue and that contain the word “javascript.”</td></tr><tr><td>help-wanted-issues:&gt;n</td><td>help-wanted-issues:&gt;4 react matches repositories with more than four issues labeled help-wanted and that contain the word “React.”</td></tr></tbody></table><p>GitHub上按“shift + /”即可查看支持的快捷键，在项目中按”t”可以快速搜索文件。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/7321caea2a08" target="_blank" rel="noopener">GitHub搜索技巧</a></p><p><a href="https://link.jianshu.com/?t=https://github.com/trending" target="_blank" rel="noopener">GitHub Trending</a>：了解各种不同开发语言的每天/周/月的最热门的 Repositories 和 Developers。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub搜索 </tag>
            
            <tag> GitHub高级检索 </tag>
            
            <tag> GitHub advanced search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图详解</title>
      <link href="/2019/11/28/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/2019/11/28/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="UML类图简介"><a href="#UML类图简介" class="headerlink" title="UML类图简介"></a>UML类图简介</h3><h2 id="一、UML类图简介"><a href="#一、UML类图简介" class="headerlink" title="一、UML类图简介"></a>一、UML类图简介</h2><p>​    在UML建模中类图(Class diagram)主要是显示了模型的静态结构，特别是模型中存在的<strong>类</strong>、<strong>类的内部结构</strong>以及<strong>它们与其他类的关系</strong>等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。它既用于应用程序的系统分类的一般概念建模，也用于详细建模，将模型转换成编程代码。</p><p>​    类图中最基本的元素是类或者接口。</p><p>​    类图主要用在面向对象<strong>软件开发的分析和设计阶段</strong>，描述系统的静态结构。类图图示了所构建系统的所有实体、实体的内部结构以及实体之间的关系。即，类图中包含从用户的客观世界模型中抽象出来的类、类的内部结构和类与类之间的关系，它是构建其他设计模型的基础，没有类图，就没有<strong>对象图</strong>、<strong>状态图</strong>、<strong>协作图</strong>等其他UMI。动态模型图也就无法表示系统的动态行为。类图也是面向对象编程的起点和依据。类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人们简化对系统的理解，它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。</p><p> ——————以上来自百度百科。</p><h2 id="二、UML中类的表达方式"><a href="#二、UML中类的表达方式" class="headerlink" title="二、UML中类的表达方式"></a>二、UML中类的表达方式</h2><p>​    在UML类图中，一个类主要包含类名、属性以及方法。将三部分用矩形框起来并加上分割线就表示一个类。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%80.png" alt="图 1"></p><p>上图展示了枚举、接口以及类的表示方式，如果类的表示方式中蓝色部分的类名称使用斜体，则表示该类为抽象类。</p><p>实际上，属性的完整表示方式是这样的：</p><p><strong>可见性  名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式如下：</p><p><strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><p>其中，中括号中的内容是可选的。</p><p>属性前边的符号含义如下：</p><ul><li>-表示属性为private</li><li>+表示属性为public</li><li>#表示属性为 protected</li></ul><h2 id="三、类与类之间关系表示方式"><a href="#三、类与类之间关系表示方式" class="headerlink" title="三、类与类之间关系表示方式"></a>三、类与类之间关系表示方式</h2><h3 id="3-1-关联关系"><a href="#3-1-关联关系" class="headerlink" title="3.1 关联关系"></a>3.1 关联关系</h3><p>关联关系包括：单向关联、双向关联、自关联。</p><h4 id="3-1-1-单向关联"><a href="#3-1-1-单向关联" class="headerlink" title="3.1.1 单向关联"></a>3.1.1 单向关联</h4><p>定义：单向关联表示一个类A将另一个类B作为类内部的成员，类A可以调用类B中的公共属性和方法。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%8C.png" alt="图 2"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Consumer类持有一个类型为Address的成员变量类实现 。</p><h4 id="3-1-2-双向关联"><a href="#3-1-2-双向关联" class="headerlink" title="3.1.2 双向关联"></a>3.1.2 双向关联</h4><p>定义： 双向关联就是双方各自持有对方类型的成员变量 ，都可以调用对方的公共属性和方法。具体表示如下图：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%89.png" alt="图 3"></p><p>在UML类图中，双向关联用一个不带箭头的实线表示。上图中在Consumer类中维护一个Product[]数组，表示一个顾客购买了那些产品；在Product类中维护一个Consumer类型的成员变量表示这个产品被哪个顾客所购买。 </p><h4 id="3-1-3-自身关联"><a href="#3-1-3-自身关联" class="headerlink" title="3.1.3 自身关联"></a>3.1.3 自身关联</h4><p>定义：自身关联也叫反身关联，自己引用自己，带着一个自己的引用。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%9B%9B.png" alt="图 4"></p><p>自身关联在UML类图中用一个带有箭头且指向自身的实线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。 </p><h3 id="3-2-聚合关系"><a href="#3-2-聚合关系" class="headerlink" title="3.2 聚合关系"></a>3.2 聚合关系</h3><p>定义： 聚合用来表示集体与个体之间的关联关系 。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%94.png" alt="图 5"></p><p>UML中聚合关系用实线加空心菱形表示。聚合关系强调是“集体”包含“个体”，但是“个体”可以脱离“集体”而单独存在。比如上图中班级包含了学生，而学生脱离了班级也能单独存在。 </p><h3 id="3-3-组合关系"><a href="#3-3-组合关系" class="headerlink" title="3.3 组合关系"></a>3.3 组合关系</h3><p>定义： 组合又叫复合，用来表示个体与组成部分之间的关联关系， 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AD.png" alt="图 6"></p><p>组合关系与聚合关系见得最大不同在于：这里的“部分”脱离了“整体”便不复存在 。</p><p><strong>聚合与组合的对比：</strong><br>（1）聚合关系没有组合紧密。<br>学生不会因为班级的解散而无法存在，聚合关系的类具有不同的生命周期；而学生如果没有心脏将无法存活，组合关系的类具有相同的生命周期。</p><p>这个从构造函数可以看出。聚合类的构造函数中包含另一个类的实例作为参数，因为构造函数中传递另一个类的实例，因此学生可以脱离班级体独立存在。组合类的构造函数包含另一个类的实例化。因为在构造函数中进行实例化，因此两者紧密耦合在一起，同生同灭，学生不能脱离心脏而存在。</p><p>（2）信息的封装性不同。<br>在聚合关系中，客户端可以同时了解Classes类和Student类，因为他们是独立的。</p><p>在组合关系中，客户端只认识Student类，根本不知道Heart类的存在，因为心脏类被严密地封装在学生类中。</p><p>理解聚合与复合的区别，主要在于聚合的成员可独立，复合的成员必须依赖于整体才有意义。</p><h3 id="3-3-依赖关系"><a href="#3-3-依赖关系" class="headerlink" title="3.3 依赖关系"></a>3.3 依赖关系</h3><p>定义： 依赖关系是五种关系中耦合最小的一种关系。类A要完成某个功能引用了类B，则类A依赖类B。依赖在代码中主要体现为<strong>类A的某个成员函数的返回值、形参、局部变量或静态方法的调用，则表示类A引用了类B</strong>。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%83.png" alt="图 7"></p><p>Driver的drive方法只有传入了一个Car对象才能发挥作用，因此我们说Driver类依赖于Car类。在UML类图中，依赖关系用一条带有箭头的虚线表示。 </p><h3 id="3-4-继承关系"><a href="#3-4-继承关系" class="headerlink" title="3.4 继承关系"></a>3.4 继承关系</h3><p>定义： 继承关系对应的是extend关键字，如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”。继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AB.png" alt="图 8"></p><p>在UML类图中用带空心三角形的直线表示 。</p><h3 id="3-5-接口实现关系"><a href="#3-5-接口实现关系" class="headerlink" title="3.5 接口实现关系"></a>3.5 接口实现关系</h3><p>这种关系对应implement关键字，在UML类图中用带空心三角形的虚线表示。如下图中，Car类与Ship类都实现了Vehicle接口。</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B9%9D.png" alt="图 9"></p><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/shindo/p/5579191.html" target="_blank" rel="noopener">五分钟读懂UML类图</a></p><p><a href="https://blog.csdn.net/K346K346/article/details/59582926" target="_blank" rel="noopener">认识 UML 类关系——依赖、关联、聚合、组合、泛化</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML静态结构 </tag>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven基本配置---本地仓库+阿里云远程库</title>
      <link href="/2019/11/27/mavenSettings/"/>
      <url>/2019/11/27/mavenSettings/</url>
      
        <content type="html"><![CDATA[<h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>首先在maven主目录下创建一个文件夹用来做maven的本地仓库。<br>进入主目录下的/conf目录，编辑settings.xml文件，找到如图所示的位置：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE.png" alt="图片 1"><br>在此注释之下加入下面的内容：<br><localrepository>D:/studySoftware/apache-maven-3.6.3/pro</localrepository>，其中/pro为开始时所创建的文件夹。如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE2.png" alt="图片 2"></p><h3 id="配置阿里云远程库"><a href="#配置阿里云远程库" class="headerlink" title="配置阿里云远程库"></a>配置阿里云远程库</h3><p>由于访问国外的官方库可能速度会比较慢，在这里我们可以设置成国内的一些远程仓库，此处选用阿里云maven库。同样实在settings.xml配置文件中操作，首先找到<mirrors>标签，在此标签内添加如下内容：</mirrors></p><pre><code>&lt;mirror&gt;              &lt;id&gt;nexus-aliyun&lt;/id&gt;            &lt;name&gt;nexus-aliyun&lt;/name&gt;          &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;   </code></pre><p>如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE3.png" alt="图片 3"></p><p>ok，最后保存一下。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven本地仓库配置 </tag>
            
            <tag> maven添加阿里云远程仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo:Hello World</title>
      <link href="/2019/09/01/hello-world/"/>
      <url>/2019/09/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
