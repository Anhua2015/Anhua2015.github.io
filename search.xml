<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jQuery入口函数</title>
      <link href="/2020/06/09/jQuery-ready/"/>
      <url>/2020/06/09/jQuery-ready/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-入口函数（ready）"><a href="#jQuery-入口函数（ready）" class="headerlink" title="jQuery 入口函数（ready）"></a>jQuery 入口函数（ready）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery入口函数语法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jQuery入口函数简写形式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JavaScript入口函数</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行代码</span><span class="token punctuation">}</span></code></pre><p><strong>jQuery入口函数于JavaScript入口函数的区别：</strong> </p><p>ready是jQuery的事件，在网页中的DOM结构加载完毕之后就会去执行该事件。</p><p>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</p><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等待网页全部加载完毕（包括图片等），然后再执行包裹代码</td><td>只需要等待网页中的DOM结构加载完毕，就能执行包裹的代码</td></tr><tr><td>执行次数</td><td>只能执行一次，如果第二次，那么第一次的执行会被覆盖</td><td>可以执行多次，第N次都不会被下一次覆盖</td></tr><tr><td>简写方案</td><td>无</td><td>$(function(){  //执行代码  });</td></tr></tbody></table><h2 id="jQuery对象（-）"><a href="#jQuery对象（-）" class="headerlink" title="jQuery对象（$）"></a>jQuery对象（$）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//jQuery的全局对象只有一个：jQuery &lt;=> $</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ <span class="token operator">===</span> jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择器,参数使字符串</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把原生DOM转为jQuery DOM，参数是dom对象</span>    <span class="token keyword">var</span> $document <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个新元素,参数是字符串，并且字符串以&lt;开头</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'hello jQuery!'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>全局对象jQuery，别名是$</li><li>选择器</li><li>原生DOM转化为jQuery DOM</li><li>创建新的元素</li><li>jQuery DOM对象本质上为js原生DOM对象的数组</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery基础 </tag>
            
            <tag> ready </tag>
            
            <tag> jQuery入口函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载-科研大牛们怎么读文献</title>
      <link href="/2020/03/04/read%E2%80%94-literature/"/>
      <url>/2020/03/04/read%E2%80%94-literature/</url>
      
        <content type="html"><![CDATA[<h2 id="如何阅读文献–孟凡康"><a href="#如何阅读文献–孟凡康" class="headerlink" title="如何阅读文献–孟凡康"></a>如何阅读文献–孟凡康</h2><p>内容来自知乎上<a href="https://www.zhihu.com/people/mengfankang" target="_blank" rel="noopener">孟凡康</a>博士的回答，连接为孟博士的知乎主页。</p><h3 id="读文献要读人，读典和读新"><a href="#读文献要读人，读典和读新" class="headerlink" title="读文献要读人，读典和读新"></a>读文献要读人，读典和读新</h3><p>科研大牛们读文献的技巧很多时候是指导给学生。很幸运，我的导师在指导学生方面非常尽职尽责，在平时的闲聊之中也教给了我很多的文章阅读方法，同时加上我平时以及总结的文献阅读和获取技巧，希望在这里分享给大家。</p><p>以下是我这篇回答的主要内容：<strong>读文献要读人，读典和读新。</strong></p><p><strong>1. 如何读人？我的经验</strong><br><strong>2. 如何读典？如何获取经典的文章？</strong><br><strong>3. 如何读新？如果对新的文章进行获取和筛选？</strong></p><h4 id="1-读人"><a href="#1-读人" class="headerlink" title="1.读人"></a>1.读人</h4><p>读人是我的导师在与我晚上聊天时，推荐我去进行系统性文献阅读的方法。为什么要读人呢？一个很重要的原因在于，如果只是平时零散的阅读文献，很难去把握一个科研领域发展的脉络。可能不同的领域存在差别，但是很多时候一个领域往往是由为数不多的几个实验室推动的。如果能够对这些实验室的相关文章进行系统性的梳理，那么一定在了解相关领域的发展脉络上有更加深刻的了解，同时还可以通过思考，预测这个实验室未来的发展方向，这对我们布局以后的科研方向具有很好的促进作用。</p><p>那么如何读人呢？想必不同的人有不同的思路和方法，那么在此我也来分享一下我的方法。</p><p>就在那晚与导师闲聊之后，我便开始了自己的尝试，我第一个想要读的人是<a href="https://en.wikipedia.org/wiki/David_R._Liu" target="_blank" rel="noopener">David Liu</a>，是基因编辑、定向进化等领域的开拓者和领导者，是单碱基编辑技术，PACE定向进化技术的开创者。</p><p>想要系统性的阅读一个人的工作，那么我主要分为了以下三部分：</p><p><strong>系统性搜寻文章——文章的阅读与</strong>归类<strong>——文章的分析和个人思考</strong></p><p><strong>首先是第一部分：系统性搜寻文章</strong></p><p>我个人的经验是，想要去系统的搜索一个人代表性工作，那么<strong>谷歌学术的学者页</strong>一定是最好的选择之一。谷歌学术搜索David R. Liu，第一个搜索就会推荐这位学者的主页，点进去就可以看到这个人的所有工作，而且可以以两种方式进行排序，一是以时间，可以看到从最新的一篇文章开始到其第一篇科研工作发表的时间内所有文章的先后顺序。第二种就是以引用量才做排序。</p><p>我一般选择通过时间排序来系统的查阅学者的工作，直到其第一篇博士工作的发表。</p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%B8%80.jpg" alt="图一"></p><p>无法访问谷歌学术的话，可以考虑访问以下学术的镜像站：</p><p><a href="https://ac.scmor.com/" target="_blank" rel="noopener">https://ac.scmor.com/</a></p><p>然后我会按照时间线进行浏览，我重点关注以下几点：</p><ol><li><p>其研究生阶段所做的研究工作</p></li><li><p>其在独立成为Researcher后的研究方向</p></li><li><p>其发表的重要文章，如引用率高、发表的杂志IF高（例如CNS级别的文章）</p></li><li><p>其在不同时间段研究方向的转变</p></li><li><p>其在重大科学发现前后的工作内容（比如张锋等在2013年前后发表CRISPR-Cas9基因编辑技术前后，David Liu的工作内容）</p></li></ol><p>当然对文章有一个大致印象之后，任务就是将相关的文章全部下载下来，你可以通过多种软件进行文章在电脑本地的收集，比如Endnote、Readcube、Mendeley等等，将文章下载之后，这些软件会进行对文章信息的自动标注，我平时用的Readcube。我一共将David Liu的文章下载了180多篇，全部放在了Readcube里面。Readcube的确是一个科研利器。</p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%BA%8C.jpg" alt="图二"></p><p><strong>接下来就是第二部分：文章的阅读与归类。</strong></p><p>在阅读方面，因为180篇文章实在太多，我会进行先略读，进行归类，然后精读的方法。</p><p>首先是略读，每篇文章大致只读以下文章题目、摘要、主体内容的背景介绍以及文章中的图表，通过这种方式将文章的研究方向进行归类，比如分为基因编辑和定向进化类。</p><p>按照研究方向分类是一个很不错的方法，当然你也可以按照不同的时间段进行分类（博士、博士后、Assitant researcher（1999-2004），PI（2005-2010）），都是可以的。进行分类时，除了自己摸索，还可以访问或者阅读这位学者的研究组网站或者其个人的Curriculum Vitae (CV)等等，因为这些资料上往往会有其职位变动和研究方向的信息。</p><p>在大致阅读完David Liu的工作之后，我将其研究方向分为了一下四点：</p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%B8%89.jpg" alt="图三"></p><p>同时按照不同的时间点，我将其目前的科研生涯分为了四个时间段，同样是按照以下的标准：</p><ol><li><p>其研究生阶段所做的研究工作</p></li><li><p>其在独立成为Researcher后的研究方向</p></li><li><p>其发表的重要文章，如引用率高、发表的杂志IF高（例如CNS级别的文章）</p></li><li><p>其在不同时间段研究方向的转变</p></li><li><p>其在重大科学发现前后的工作内容（比如张锋等在2013年前后发表CRISPR-Cas9基因编辑技术前后，David Liu的工作内容）</p></li></ol><p><img src="/images/other/readliterature/%E5%9B%BE%E5%9B%9B.jpg" alt="图四"></p><p>在完成对所有文章的大致分类后，就需要对其中代表性的文章就行精读了，精读的时候我会更加关注文章主题的内容，比如方法和结论，但是对于细节的实验数据我一般会自动略过，只关注结论就好。<strong>同时文章的Discussion部分，是我另一个关注的重点，这里会有对全文的总结和未来研究方向的展望，这对我们把我一个学者的思考以及研究方向是很重要的。</strong></p><p><strong>同时我非常建议在这一部分通过思维导图辅助自己对文章进行总结。</strong>比如我就以“时间段-研究方向-代表性工作-简短的总结”为基础，把所有的工作一一归类汇总。思维导图的好处在于其可以让我们更加清晰的总结出对应事物的发展脉络。同时还可以增加记忆性，基本完成思维导图后对每一部分的记忆都非常深刻。</p><p>以下是我个人对于David Liu所有工作的总结：</p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%BA%94.jpg" alt="图五"></p><p><strong>最后一部分则是：文章的分析和个人思考。</strong></p><p>最后一部分则是升华的部分，在前面完成了大量的阅读工作后，想必所有人都会具有了一定的思考，这些思考可能是对于研究内容的评价，也有可能是对于未来研究方向的预测。</p><p>这些也是我们进行读人的意义：理清脉络、看清方向。</p><p>以下是我对David Liu工作的汇总，我从四个方向对其研究工作进行了总结，包括：DNA-Template Synthesis、Continuous Evolution of Proteins、Macromolecule delivery into Mammalian Cells和The Development and application of Genome Editing tools。</p><p><img src="/images/other/readliterature/%E5%9B%BE%E5%85%AD.jpg" alt="图六"></p><p>同时我也对其未来研究方向进行了一定的思考，并总结了如下的思维导图：</p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%B8%83.jpg" alt="图七"></p><hr><p><strong>总体来说，以上三部分的话，第二部分所花的时间是最长的，因为要耗费大量的时间进行阅读、分析以及思维导图的绘制。</strong>但是我认为这是值得的，毕竟你花费几天时间的结果是清晰的读懂了一个学者的学术脉络，这对于我们的学术生涯是受益匪浅的。</p><h4 id="2-读经典（或者优秀的文章）"><a href="#2-读经典（或者优秀的文章）" class="headerlink" title="2. 读经典（或者优秀的文章）"></a>2. 读经典（或者优秀的文章）</h4><p><strong>经典的文章的作用我想就不必多谈了，经典的文章能让人明确领悟的发展脉络，或者看到一个领域的过去与未来。</strong>这可能是一篇经典的实验结果或者是一篇全面细致的综述。那么什么样的文章才算经典呢？</p><p>在我的想法中，以下的标准可能能够作为一种参考：</p><p><strong>1.本领域内大家一直在讨论的、周围的人（导师、同事等等）一直推荐给你的文章，应该都没有太大的问题。</strong></p><p><strong>2.平时要注意关注本领域的一些顶级科学家，比如我所在领域的Chris Voigt，James Collins等等。在谷歌建立的学者页会有列出所有相关的文章，按照引用率的排序，一般引用率比较高的都属于非常好的文章，可以作为经典来读。</strong></p><p><img src="/images/other/readliterature/%E5%9B%BE%E5%85%AB.jpg" alt="图八"></p><p><strong>3. 同时无论是谷歌学术搜索都会给出某领域或者某杂志的引用率最高的文章排序，这种以引用率为评价标准的一般问题都不大。比如Cell引用率最高的几篇文章：</strong></p><p><img src="/images/other/readliterature/%E5%9B%BE%E4%B9%9D.jpg" alt="图九"></p><h4 id="3-读新"><a href="#3-读新" class="headerlink" title="3. 读新"></a>3. 读新</h4><p><strong>读新则是对所关注领域的最新进展。</strong></p><p>在这方面，更多的是利用多种工具进行最新文章的推送。 <a href="https://www.zhihu.com/question/21278186/answer/593999044" target="_blank" rel="noopener">@冲气以为和</a>在文章中已经提到了一些方法和工具，我在这里就不在多谈了。</p><p>这方面我有两点经验：</p><p><strong>1. 利用文献订阅工具进行最新文献的获取</strong></p><p><strong>我平时主要的订阅来源只要来自于Google Scholar、Researcher App、Stork以及相关相关杂志网站的订阅服务。</strong></p><p><strong>Google Scholar不必多说，每天或者每周推送，推送的质量很高，可以按照关键词（人名、领域、杂志等）进行订阅。</strong></p><p><img src="/images/other/readliterature/%E5%9B%BE%E5%8D%81.jpg" alt="图十"></p><p>关于Researcher APP，我曾经写过一篇回答，专门介绍了这个软件，它可以让我们想浏览朋友圈一样浏览杂志的最新发表文章：<a href="https://www.zhihu.com/question/26947029/answer/445849858" target="_blank" rel="noopener">有哪些适合科研狗的APP？</a></p><p><strong>2. 新文章太多怎么办？利用新闻类和公众号文章进行优秀工作的筛选</strong></p><p>很多重要的工作有时候你不用主动去查，它会自动找上门来，为什么呢？因为铺天盖地的科研新闻或者公众号文章都会像你介绍这些工作。而这些也就成为了一个重要的文章筛选器。如果你只是想读一下最近的热点工作，不如先试试这些大家普遍关注的工作~</p><p>你也可以利用Feedly或者搜索引擎的关键词订阅服务，及时的获取相关的资讯。</p><p>比如Feedly：</p><p><a href="https://feedly.com/" target="_blank" rel="noopener">https://feedly.com/</a></p><h2 id="如何阅读文献–xupenggoing"><a href="#如何阅读文献–xupenggoing" class="headerlink" title="如何阅读文献–xupenggoing"></a>如何阅读文献–xupenggoing</h2><p>内容来自知乎上<a href="https://www.zhihu.com/people/xupenggoing" target="_blank" rel="noopener">xupenggoing</a>博士的回答，连接为xupenggoing的知乎主页。</p><p>直博四年级，自认为读了一些文献，答一波。</p><p>我们实验室有个传统，每周一组会上，一年级新生需要把上一周的 CNS 的封面（哪怕非生物的也要讲）以及跟生物相关的研究文章都讲一遍。研一一年的主题基本就是看文献，讲文献。<em>Nature</em> 和 <em>Science</em> 是周刊，分别是北京时间周四凌晨和周五凌晨更新，每周都有与生物相关的文章，通常加起来 5<del>10 篇不等吧；<em>Cell</em> 是半月刊，每两周的周四更新，所有的文章都跟生物相关，但还好只讲研究文章，每期都超过 10 篇。因此每周研一新生的工作量在 2</del>3 天（只有周末了）内看完至少 15 篇 CNS  文章，并做好 PPT，下周一组会上讲解。唯一的安慰可能是，老板每年招两个人，我可以跟另外一个小伙伴轮换着讲，这周我讲，下周他讲；或者这个月我讲，下个月他讲。</p><p>前段时间老板让我给新来的师弟师妹做个论文讲解的示范，我在 3 天内快速浏览了 28 篇 CNS 文章，并做了一份 50 页的 PPT。在看文献的时候，我就在想，如果我是读者，我看到文章标题后，我想知道什么？我是这篇文章作者的话，我该如何向别人介绍我的工作？那一周的 28 篇 CNS 文章的讲解见：<a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/I09uczjOblvaM9X0ac6bBQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/I09uczjOblvaM9X0ac6bBQ</a>。PPT下载地址：<a href="https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1WeLPHsaja50NjbgFZWv9Uw" target="_blank" rel="noopener">https://pan.baidu.com/s/1WeLPHsaja50NjbgFZWv9Uw</a>，提取码：ds7n。</p><p>正如我此前提到的一样，拿到一篇文献后，不妨先问自己几个问题：<strong>（1）这篇文章属于什么领域或方向？（2）解决了什么问题？为什么这个问题这么重要？（3）使用了什么方法和模型？为什么这个方法可以解决这个问题？（4）核心结论是什么？下一步还可以怎么做？</strong></p><p><strong>（1）这篇文章属于什么领域或方向？</strong></p><p>纵向来看，生物过程包括个体层面、组织器官层面、细胞层面、分子层面以及原子层面等。横向切分，这个过程属于什么范畴，比如表观遗传学、免疫、神经生物学、发育生物学等。现阶段的文献，分子层面的机制偏多。由中心法则延展开来，分子无非 DNA、RNA 和蛋白质，这些分子的排列组合起来参与一些特定的过程，比如 DNA 复制、DNA 转录、RNA 翻译、RNA 修饰、组蛋白修饰、非组蛋白修饰等等。当然还有染色体整体层面出发的，比如染色体高级结构调控等。</p><p><strong>在大脑里面，先得有一个宏观的概念，知道这篇文章在生命科学的位置</strong>。其次，需要知道这篇文章所属的细分领域。完成这一步，确实需要经验积累。我本科制药工程，研究生转到表观遗传学，此前根本没听过表观遗传学，也没学过分子生物学和细胞生物学，更不谈结构生物学、生物信息学了，于是所有的都得重新开始。</p><p>从研一开始，我就用最笨的方法，每次读文献，发现一个新的研究方向或主题，我就会单独建一个文件夹，此后所有相关的文献都一一归类；如果下次又读到新的文献，发现它不属于目前的任何主题，于是就又新建一个。</p><p><img src="/images/other/readliterature/%E5%9B%BE%E5%8D%81%E4%B8%80.jpg" alt="图十一"></p><p>这只是大的目录，然后里面随便点开一个文件夹，比如很火热的【RNA修饰&amp;二级结构&amp;编辑】，可以看到：</p><p><img src="/images/other/readliterature/%E5%9B%BE%E5%8D%81%E4%BA%8C.jpg" alt="图十二"></p><p>其实，归类的过程也是慢慢消化和整理的过程。<strong>尽量让读过的文献逐渐融入自己的知识体系</strong>，而不是读过就读过了。当文献是孤零零时，你很难记住成千上万个孤零零的知识点；但是一旦成为体系，就更容易记住了，此为内化。</p><p><strong>（2）这篇解决了什么问题？为什么这个问题这么重要？</strong></p><p>我老板经常在组会上问我们的一个问题是，这篇文章为什么能发在 CNS 上？如果这个问题能回答清楚，其实文章基本上也就消化了。</p><p>能发在 CNS 上的研究每一篇都有故事，我们需要挖掘这背后的故事：有的是困扰学术界几十年的难题，今天终于获得解答，比如施一公他们关于剪接体结构的解析；有的是颠覆人们认知的新发现，比如此前人们认为，脑中没有淋巴管，但 2018 年 8 月 9 日的 <em>Nature</em> 封面文章就报道，在大脑中清楚地观察到了脑膜淋巴管；还有的是让几十年的争论尘埃落定，比如终于发现了引力波。</p><p>在文章的第一句，作者通常就会说明自己为什么要做这个研究，以及这个研究为什么这么重要；而且会在文章的第一段或者第一部分进行详细的说明，多花时间思考这个问题远胜于你花时间弄懂每一幅图说什么。</p><p><strong>（3）这篇文章使用了什么方法和模型？为什么这个方法可以解决这个问题？</strong></p><p>对于 <em>Nature</em> 的 Articles、<em>Science</em> 的 Research Articles 以及 <em>Cell*，每一部分都有小标题，快速浏览后，我们可以知道这篇文章分为几个部分，每个部分作者打算做什么工作。对于 *Nature</em> 的 Letters 和 <em>Science</em> 的 Reports，不妨先看每一段的第一句话，就可以知道该部分要做什么。</p><p><strong>带着问题读文献，效率会很高。</strong></p><p><strong>（4）核心结论是什么？下一步还可以怎么做？</strong></p><p>文章的核心结果都在图里面，这个时候可以去看图了，这个图证明了什么，为什么能支持这个结论。如果你是这个研究方向的，那么最后很有必要看 Discussion 部分，作者会对文章的核心观点做一个回顾，并且会讨论下一步的计划，具有一定的启发性。</p><p>其实哪怕我现在博士四年级，我也依然会碰到自己此前从来没接触的研究主题，但相比一年级，这种事情发生的概率要低得多。万一碰到自己不熟悉的，尤其是方法学的开发，会非常晦涩难懂，而且尤其对于 <em>Nature</em> 和 <em>Science</em>，其篇幅是有规定的，因此要求作者极度凝练。碰到这种情况，不妨把摘要和 Introduction 部分多读几遍，读不懂反复读，亲测非常有效。书读百遍其义自见，文献亦然，古人诚不我欺也。</p><p><strong>其他小 tips:</strong></p><ol><li>对于不懂的概念，用视频和图片帮助消化。直接在 YouTube 等视频网站，Google、Bing 等输入关键词，找到解读视频或模式图，会极大地帮助消化；</li><li>对于陌生的领域或主题，建议先看综述帮助建立一个基本的认识，而且一开始不妨看中文综述，知识没有高低贵贱，也有很多中文综述写的很好的；</li><li>在文献阅读过程中，留意科学史，注意科学问题的延续性。比如这几年非常火热的相分离（phase seperation），你自己画一条时间线，哪一年谁最先发现这个现象，哪一年谁做出了关键突破。自己尝试写一个简短的综述，熟悉经典的工作以及行业的大牛，今后读起来会觉得：哦，这篇文章的作者是“老熟人”，他之前做出过什么重要的工作……</li><li>软件方面，可能不少小伙伴会选择使用思维导图软件，我只用过 MindMaster，可以帮助梳理思路；我自己最常用的软件是「幕布」，非常轻便的结构化笔记整理软件，可以一键生成思维导图，还可以在多个平台上进行实时同步，导出的格式也很多，安利一下~</li></ol><p>Anyway，文献是科研的重要组成部分，祝福小伙伴享受阅读文献，享受科研啦~</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.zhihu.com/question/21278186" target="_blank" rel="noopener">科研大牛们怎么读文献</a></p><p><a href="http://blog.sciencenet.cn/blog-951291-1177545.html" target="_blank" rel="noopener">转载*科研大牛们怎么读文献</a></p><p><a href="https://www.zhihu.com/question/21278186/answer/682172695" target="_blank" rel="noopener">科研大牛们怎么读文献？ - xupenggoing的回答 - 知乎</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何阅读文献 </tag>
            
            <tag> 科研第一步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ-CPP基础开发环境 linux</title>
      <link href="/2020/02/04/AMQ-linux/"/>
      <url>/2020/02/04/AMQ-linux/</url>
      
        <content type="html"><![CDATA[<p>CMS (C++ 消息服务)是一个面象apache activemq的消息中间层的C++接口。ActiveMQ-CPP是CMS的实现，不过当前只支持 openwire、amqp、TCP、ssl。 现在还支持主备切换功能。通过使用ActiveMQ-CPP提供的接口，我们可以使用多种协议来与消息中间件进行通信。下面的内容是在CentOS 7 x64（Linux）环境下搭建基本的ActiveMQ-CPP的开发环境，由于系统的基础环境的差异，该教程仅供参考。</p><h2 id="一、基础环境"><a href="#一、基础环境" class="headerlink" title="一、基础环境"></a>一、基础环境</h2><p>ActiveMQ-CPP开发环境需要如下依赖，但是由于操作系统环境的差异，实际上可能不全，需根据实际情况增加依赖。</p><table><thead><tr><th align="center">TOOL</th><th align="center">Recommended Version</th></tr></thead><tbody><tr><td align="center">autoconf</td><td align="center">&gt;=  2.61</td></tr><tr><td align="center">automake</td><td align="center">&gt;=  1.10</td></tr><tr><td align="center">libtool</td><td align="center">&gt;= 1.5.24</td></tr><tr><td align="center">CPPUnit</td><td align="center"><a href="https://sourceforge.net/projects/cppunit/files/cppunit/1.12.1/cppunit-1.12.1.tar.gz/download" target="_blank" rel="noopener">1.12.1</a></td></tr><tr><td align="center">apr</td><td align="center"><a href="http://apache.website-solution.net//apr/apr-1.7.0.tar.gz" target="_blank" rel="noopener">1.7.0</a></td></tr><tr><td align="center">apr-iconv</td><td align="center"><a href="http://apache.website-solution.net//apr/apr-iconv-1.2.2.tar.gz" target="_blank" rel="noopener">1.2.2</a></td></tr><tr><td align="center">apr-util</td><td align="center"><a href="http://apache.website-solution.net//apr/apr-util-1.6.1.tar.gz" target="_blank" rel="noopener">1.6.1</a></td></tr><tr><td align="center">OpenSSL</td><td align="center"><a href="https://www.openssl.org/source/openssl-1.1.1d.tar.gz" target="_blank" rel="noopener">1.1.1d</a></td></tr><tr><td align="center">ActiveMQ-CPP</td><td align="center"><a href="https://archive.apache.org/dist/activemq/activemq-cpp/3.9.5/activemq-cpp-library-3.9.5-src.tar.gz" target="_blank" rel="noopener">3.9.5</a></td></tr></tbody></table><p>对于autoconf、automake、libtool我们可以直接安装：</p><pre><code>yum -y install autoconfyum -y install automakeyum -y install libtool</code></pre><h3 id="CPPUnit"><a href="#CPPUnit" class="headerlink" title="CPPUnit"></a>CPPUnit</h3><p>tar解压后，进入目录，编译三部曲，configure、make、make install（install需要root权限）：</p><pre><code>./configure --prefix=/usr/local/cppunitmakemake install</code></pre><p>执行完后在/usr/local/cppunit/目录下可以看到头文件和库文件。</p><h3 id="APR"><a href="#APR" class="headerlink" title="APR"></a>APR</h3><p>同上，解压进入目录，三部曲：</p><pre><code>./configure --prefix=/usr/local/aprmakemake install</code></pre><h2 id="apr-iconv"><a href="#apr-iconv" class="headerlink" title="apr-iconv"></a>apr-iconv</h2><p>解压编译：</p><pre><code>./configure --prefix=/usr/local/apriconv --with-apr=/usr/local/aprmakemake install</code></pre><h3 id="apr-util"><a href="#apr-util" class="headerlink" title="apr-util"></a>apr-util</h3><p>解压编译：</p><pre><code>./configure --prefix=/usr/local/aprutil --with-apr=/usr/local/aprmakemake install</code></pre><h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>解压编译：</p><pre><code>./config --prefix=/usr/local/opensslmakemake install</code></pre><h3 id="ActiveMQ-CPP"><a href="#ActiveMQ-CPP" class="headerlink" title="ActiveMQ-CPP"></a>ActiveMQ-CPP</h3><p>解压编译：</p><pre><code>./configure --prefix=/usr/local/activemq-cpp --with-apr=/usr/local/apr --with-apr-iconv=/usr/local/apriconv --with-apr-util=/usr/local/aprutil --with-cppunit=/usr/local/cppunit --with-openssl=/usr/local/opensslmakemake install</code></pre><p>若在make时报错，提示找不到ssl库<br>/usr/bin/ld: cannot find -lssl<br>进入到 /usr/local/openssl目录，将lib64目录复制一份，复制的新目录名为lib，命令：cp -r lib64 lib，这是由于make时使用的 /usr/local/openssl/lib路径导致。</p><h2 id="二、测试程序"><a href="#二、测试程序" class="headerlink" title="二、测试程序"></a>二、测试程序</h2><p>到这里ActiveMQ-CPP的基本环境就搭建完成了，在/usr/local目录下生成了6个目录，分别为activemq-cpp、apr、apr-iconv、aprutil、cppunit、openssl。</p><p>下面编写一段测试代码（test.cpp），用于检测cms开发库是否可用。</p><pre><code>#include &lt;activemq/library/ActiveMQCPP.h&gt;#include &lt;decaf/lang/Thread.h&gt;#include &lt;decaf/lang/Runnable.h&gt;#include &lt;decaf/util/concurrent/CountDownLatch.h&gt;#include &lt;decaf/lang/Integer.h&gt;#include &lt;decaf/lang/Long.h&gt;#include &lt;decaf/lang/System.h&gt;#include &lt;activemq/core/ActiveMQConnectionFactory.h&gt;#include &lt;activemq/util/Config.h&gt;#include &lt;cms/Connection.h&gt;#include &lt;cms/Session.h&gt;#include &lt;cms/TextMessage.h&gt;#include &lt;cms/BytesMessage.h&gt;#include &lt;cms/MapMessage.h&gt;#include &lt;cms/ExceptionListener.h&gt;#include &lt;cms/MessageListener.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;memory&gt;using namespace activemq::core;using namespace decaf::util::concurrent;using namespace decaf::util;using namespace decaf::lang;using namespace cms;using namespace std;int main(){        activemq::library::ActiveMQCPP::initializeLibrary();        Connection* conn;        Session* sess;        Destination* dest;        MessageProducer* producer;        std::string brokerurl("failover:(tcp://127.0.0.1:61616)");        try        {                auto_ptr&lt;ConnectionFactory&gt; connFactory(ConnectionFactory::createCMSConnectionFactory(brokerurl));                conn = connFactory-&gt;createConnection();                conn-&gt;start();                sess = conn-&gt;createSession(Session::AUTO_ACKNOWLEDGE);                dest = sess-&gt;createQueue("QueueFromLinuxTest");                producer = sess-&gt;createProducer(dest);                producer-&gt;setDeliveryMode(DeliveryMode::NON_PERSISTENT);                string text("Hello ActiveMQ from LinuxTest");                for (int i = 0; i &lt; 3; ++i)                {                        TextMessage* msg = sess-&gt;createTextMessage(text);                        msg-&gt;setIntProperty("IntProp1", i);                        producer-&gt;send(msg);                        cout &lt;&lt; "SEND-&gt; " &lt;&lt; text &lt;&lt; endl;                        delete msg;                }        }        catch (CMSException&amp; e)        {                e.printStackTrace();        }        try {                delete dest;                dest = NULL;                delete producer;                producer = NULL;                if (NULL != sess)                        sess-&gt;close();                if (NULL != conn)                        conn-&gt;close();                delete sess;                sess = NULL;                delete conn;                conn = NULL;        }        catch (CMSException&amp; e)        {                e.printStackTrace();        }        cout &lt;&lt; "test end" &lt;&lt; endl;        activemq::library::ActiveMQCPP::shutdownLibrary();}</code></pre><p>编译命令：运行时，需要将/usr/local/activemq-cpp/lib下的libactivemq-cpp.so、libactivemq-cpp.so.19、libactivemq-cpp.so.19.0.5这3个，以及/usr/local/openssl/lib下的libssl.so.1.1以及libcrypto.so.1.1复制到/usr/lib64目录下。</p><pre><code>g++ test.cpp -I /usr/local/activemq-cpp/include/activemq-cpp-3.9.5 -I /usr/local/apr/include/apr-1 -L /usr/local/openssl/lib -l ssl -l crypto -L /usr/local/activemq-cpp/lib -l activemq-cpp</code></pre><p> gcc/g++的编译参数，这里只介绍 -L 、-l、-include、-I。</p><pre><code>  -L ：表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。 -l (L的小写)：表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test -include ：包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。  -I (i 的大写)：指定头文件的所在的目录，可以使用相对路径。</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/dream_1996/article/details/69397089" target="_blank" rel="noopener">CentOs下安装gcc/g++/gdb</a></p><p><a href="https://blog.csdn.net/lgh1700/article/details/51055784" target="_blank" rel="noopener">Linux下安装ActiveMQ CPP</a></p><p><a href="https://blog.csdn.net/github_30605157/article/details/60468727" target="_blank" rel="noopener">Linux下安装ActiveMQ CPP Library 3.9.4</a></p><p><a href="https://www.twblogs.net/a/5b838b832b71776c51e38884/zh-cn" target="_blank" rel="noopener">Linux 下的 ActiveMQ C++ 客户端开发</a></p><p><a href="https://blog.csdn.net/surgewong/article/details/39236707" target="_blank" rel="noopener">gcc/g++ 链接库的编译与链接</a></p><p><a href="https://yq.aliyun.com/articles/579663" target="_blank" rel="noopener">C++ activemq CMS 学习笔记</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ-CPP编译_linux </tag>
            
            <tag> ActiveMQ-CPP基础环境_linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMQ-CPP demo windows下</title>
      <link href="/2020/01/28/AMQMQ-demo/"/>
      <url>/2020/01/28/AMQMQ-demo/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在windows下开发ActiveMQ-CPP需要依赖一些第三方库，具体参考如下：</p><ol><li>ActiveMQ-CPP需要依赖apr-iconv、apr-util、apr、expat、cppunit等库。</li><li><a href="https://anhua2015.github.io/2020/01/23/APR_Compile/" target="_blank" rel="noopener">visual studio 2019下进行apr、apr-iconv、apr-util编译</a></li><li><a href="https://anhua2015.github.io/2020/01/27/cpp-cppunit/" target="_blank" rel="noopener">CppUnit编译_VS 2019</a></li><li><a href="https://anhua2015.github.io/2020/01/28/ActiveMQ-Cpp/" target="_blank" rel="noopener">ActiveMQ-CPP编译——VS 2019</a></li></ol><h2 id="一、开发步骤"><a href="#一、开发步骤" class="headerlink" title="一、开发步骤"></a>一、开发步骤</h2><ol><li>首先创建文件夹test文件夹，在该文件夹下创建lib文件夹，将cppunit.lib、libactivemq-cpp.lib、libapr-1.lib、libapriconv-1.lib、libaprutil-1.lib放到该文件夹下，如下图所示：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E4%B8%80.png" alt="图一"></p><ol start="2"><li>使用VS打开test文件夹，创建c++控制台应用，如下图所示：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E4%BA%8C.png" alt="图二"></p><ol start="3"><li>右键AMQdemo项目，选择属性，找到C/C++ ——&gt; 常规 ——&gt; 附加包含目录，添加如下几项：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E4%B8%89.png" alt="图三"></p><ol start="4"><li>右键AMQdemo项目，选择属性，找到 连接器——&gt;常规——&gt;附加库目录，添加如下项：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E5%9B%9B.png" alt="图四"></p><ol start="5"><li>右键AMQdemo项目，选择属性，找到 连接器——&gt;输入——&gt;附加依赖项，添加如下项：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E4%BA%94.png" alt="图五"></p><ol start="6"><li>在目录\test\AMQdemo\Release下添加如下动态库：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E5%85%AD.png" alt="图六"></p><ol start="7"><li>运行结果如下：</li></ol><p><img src="/images/c++/AMQ_demo/%E5%9B%BE%E4%B8%83.png" alt="图七"></p><ol start="8"><li>最后附上完整代码：<a href="https://github.com/Anhua2015/AMQ-CPP-DEMO-WIN" target="_blank" rel="noopener">DEMO</a></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://my.oschina.net/Thinkeryjgfn/blog/704618" target="_blank" rel="noopener">C++ ActiveMQ实现通讯</a></p><p><a href="https://blog.csdn.net/weixin_43935474/article/details/86700576" target="_blank" rel="noopener">VS，C++ 中error LNK2001: 无法解析的外部符号 <strong>imp</strong>socket@12</a></p><p><a href="https://blog.csdn.net/lee353086/article/details/6777261" target="_blank" rel="noopener">Active MQ C++实现通讯</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ-CPP demo </tag>
            
            <tag> VS下开发ActiveMQ-CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ-CPP编译——VS 2019</title>
      <link href="/2020/01/28/ActiveMQ-Cpp/"/>
      <url>/2020/01/28/ActiveMQ-Cpp/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CMS（代表C ++消息服务）是一种类似于JMS的API，用于C ++，用于与诸如Apache ActiveMQ之类的消息代理进行接口。 CMS有助于使您的C ++客户端代码更加整洁并易于遵循。 为了更好地了解CMS，请尝试使用API参考。 ActiveMQ-CPP是仅客户端的库，客户端仍需要消息代理（例如Apache ActiveMQ）进行通信。我们的CMS实现称为ActiveMQ-CPP，它具有允许可插拔传输和有线格式的体系结构。 目前，我们支持基于TCP和SSL的OpenWire和Stomp协议，我们现在还支持故障转移传输以实现更可靠的客户端操作。 除CMS外，ActiveMQ-CPP还提供了一组强大的类，它们支持与平台无关的构造，例如线程，I / O，套接字等。您可能会发现其中许多实用程序非常有用，例如像Thread类之类的Java或Java。 “同步”宏，可让您在实现activemq :: concurrent :: Synchronizable接口的任何对象上使用类似于Java的同步。 ActiveMQ-CPP根据Apache 2.0许可发布。    </p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>系统环境：windows 10</li><li>IDE：VS 2019</li><li>ActiveMQ-CPP需要依赖apr-iconv、apr-util、apr、expat、cppunit等库。</li><li><a href="https://anhua2015.github.io/2020/01/23/APR_Compile/" target="_blank" rel="noopener">visual studio 2019下进行apr、apr-iconv、apr-util编译</a></li><li><a href="https://anhua2015.github.io/2020/01/27/cpp-cppunit/" target="_blank" rel="noopener">CppUnit编译_VS 2019</a></li></ol><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li>下载：<a href="http://www.apache.org/dyn/closer.lua/activemq/activemq-cpp/3.9.5/activemq-cpp-library-3.9.5-src.zip" target="_blank" rel="noopener">activemq-cpp-library-3.9.5.src.zip</a></li><li>解压。</li><li>使用VS 2019打开{ActiveMQ-CPP_HOME}/vs2010-build/activemq-cpp.sln文件。</li><li>使用VS的Release版本进行编译，如下图所示：</li></ol><p><img src="/images/c++/ActiveMQ-CPP_complie/%E5%9B%BE%E4%B8%80.png" alt="图一"></p><ol start="5"><li><p>配置其他依赖库。</p><ul><li>右键activemq-cpp项目，选择属性。</li><li>找到C/C++ ——&gt; 常规，选择附加包含目录，选择编辑，如下图所示：</li></ul><img src="/images/c++/ActiveMQ-CPP_complie/图二.png" alt="图二" style="zoom:50%;"><ul><li>引入apr、apr-iconv、apr-util的include目录，如下图所示：</li></ul><p><img src="/images/c++/ActiveMQ-CPP_complie/%E5%9B%BE%E4%B8%89.png" alt="图三"></p></li><li><p>右键activemq-cpp项目，点击生成，编译成功后，如下图所示：</p></li></ol><img src="/images/c++/ActiveMQ-CPP_complie/图四.png" alt="图四" style="zoom:40%;"><ol start="7"><li>我们可以在{ActiveMQ-CPP_HOME}/vs2010-build/Win32/Release目录下找到编译好的libactivemq-cpp.lib静态库。如下图所示：</li></ol><p><img src="/images/c++/ActiveMQ-CPP_complie/%E5%9B%BE%E4%BA%94.png" alt="图五"></p><p>做了这些前期准备，在下一篇文章中将会新建一个项目来运行ActiveMQ-CPP的demo。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ-CPP编译 </tag>
            
            <tag> VS下编译ActiveMQ-CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CppUnit编译_VS 2019</title>
      <link href="/2020/01/27/cpp-cppunit/"/>
      <url>/2020/01/27/cpp-cppunit/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>CppUnit</strong>是用于<a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C ++编程语言</a>的<a href="https://en.wikipedia.org/wiki/Unit_Test" target="_blank" rel="noopener">单元测试</a>框架模块。它允许对<a href="https://en.wikipedia.org/wiki/C_(programming_language)" target="_blank" rel="noopener">C</a>源代码以及C ++ 进行单元测试，而只需最少的源代码修改。它由Michael Feathers于2000年左右启动，最初是Windows 的<a href="https://en.wikipedia.org/wiki/JUnit" target="_blank" rel="noopener">JUnit</a>的C ++ <a href="https://en.wikipedia.org/wiki/Porting" target="_blank" rel="noopener">端口</a>，并由Jerome Lacoste移植到Unix。<a href="https://en.wikipedia.org/wiki/CppUnit#cite_note-2" target="_blank" rel="noopener">[2]</a>该库是根据<a href="https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License" target="_blank" rel="noopener">GNU次通用公共许可证发行的</a>。</p><p>本文将介绍在windows环境下使用VS 2019进行编译。</p><ol><li><p>下载地址：<a href="https://sourceforge.net/projects/cppunit/files/cppunit/1.12.1/cppunit-1.12.1.tar.gz/download" target="_blank" rel="noopener">cppunit-1.12.1.tar.gz</a></p></li><li><p>解压。</p></li><li><p>使用VS 2019打开{CPPUNIT_HOME}\src\CppUnitLibraries.dsw。</p></li><li><p>使用VS的Release版本进行编译，如下图所示：</p></li></ol><p><img src="/images/c++/cppunit/%E5%9B%BE%E4%B8%80.png" alt="ALT 图一"></p><ol start="5"><li>右键cppunit项目，点击生成，编译成功后如下图所示：</li></ol><p><img src="/images/c++/cppunit/%E5%9B%BE%E4%BA%8C.png" alt="ALT 图二"></p><ol start="6"><li>编译完成后我们可以在{CPPUNIT_HOME}\lib目录下找到cppunit.lib库文件。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CppUnit编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>visual studio 2019下进行apr、apr-iconv、apr-util编译</title>
      <link href="/2020/01/23/APR_Compile/"/>
      <url>/2020/01/23/APR_Compile/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>开发环境Windows  </p><p>开发工具Visual Studio 2019  </p><p>依赖的库：  </p><ul><li><a href="http://mirror.bit.edu.cn/apache//apr/apr-1.7.0-win32-src.zip" target="_blank" rel="noopener">apr-1.7.0-win32-src.zip</a></li><li><a href="http://mirror.bit.edu.cn/apache//apr/apr-iconv-1.2.2-win32-src.zip" target="_blank" rel="noopener">apr-iconv-1.2.2-win32-src.zip</a>  </li><li><a href="http://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1-win32-src.zip" target="_blank" rel="noopener">apr-util-1.6.1-win32-src.zip</a>  </li><li><a href="https://sourceforge.net/projects/expat/files/latest/download" target="_blank" rel="noopener">expat-win32bin-2.2.9.exe</a></li></ul><p>准备工作：  </p><ul><li><p>将apr、apr-iconv、apr-util解压，并将文件夹重命名将版本号去掉，如下图所示：<br><img src="/images/c++/apr/%E5%9B%BE%E4%B8%80.png" alt="Alt 图一"></p></li><li><p>执行expat安装程序，安装完成后，目录结构如下所示：</p><p><img src="/images/c++/apr/%E5%9B%BE%E4%BA%8C.png" alt="Alt 图二"></p><p>Bin目录下包含编译已经编译好的.lib静态库和.dll动态库，Source目录下包含Expat的源码。</p></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li><p>首先进入apr-util文件夹下，使用vs2019打开aprutil.dsw文件，如下图所示：</p><p><img src="/images/c++/apr/%E5%9B%BE%E4%B8%89.jpg" alt="Alt 图三"></p><p>点击确定按钮。</p><p>需要按照如下步骤进行编译：</p><ul><li>apr</li><li>apriconv</li><li>aprutil</li><li>libapr</li><li>libapriconv</li><li>libaprutil</li></ul><p>我们使用vs直接编译libaprutil即可，编译器会自动按照顺序编译完成。我们将工具栏的Debug改为Release、x86。属性的配置面板也改为Release。如下图所示：</p><p><img src="/images/c++/apr/%E5%9B%BE%E5%85%AB.png" alt="Alt 图八"></p></li><li><p>配置，编译时会出现如下错误：</p><p><img src="/images/c++/apr/%E5%9B%BE%E5%9B%9B.png" alt="Alt 图四"></p></li></ol><p>解决办法：在apr\include文件夹下找到apr.hw文件，以文本方式打开，找到宏定义“#define _WIN32_WINNT 0x0501”，将0x0501改为0x0600。  </p><p>再次编译libaprutil，会出现如下错误：</p><p><img src="/images/c++/apr/%E5%9B%BE%E4%BA%94.png" alt="ALT 图五"></p><p>这是由于我们没有配置expat的include头文件以及静态库。</p><p>首先将expat的头文件引进来，按照下图步骤配置：</p><p><img src="/images/c++/apr/%E5%9B%BE%E5%85%AD.png" alt="Alt 图六"></p><p>然后我们将expat的静态库引进来，如下图所示：</p><p>第一步：</p><p><img src="/images/c++/apr/%E5%9B%BE%E4%B8%83.png" alt="Alt 图七"></p><p>第二步：</p><p><img src="/images/c++/apr/%E5%9B%BE%E4%B9%9D.png" alt="Alt 图九"></p><p>至此配置完成，我们再次进行编译，编译成功。</p><p><img src="/images/c++/apr/%E5%9B%BE%E5%8D%81.png" alt="Alt 图十"></p><p>在各个文件夹下的Release目录下可以找到编译后产生的库。</p><p>在编译过程中可能会出现“找不到apr_escape_test_char.h头文件”错误，解决方法，可以自己新建一个头文件，内容如下：</p><pre><code>/* this file is automatically generated by gen_test_char, do not edit. "make include/private/apr_escape_test_char.h" to regenerate. */#define T_ESCAPE_SHELL_CMD     (1)#define T_ESCAPE_PATH_SEGMENT  (2)#define T_OS_ESCAPE_PATH       (4)#define T_ESCAPE_ECHO          (8)#define T_ESCAPE_URLENCODED    (16)#define T_ESCAPE_XML           (32)#define T_ESCAPE_LDAP_DN       (64)#define T_ESCAPE_LDAP_FILTER   (128)static const unsigned char test_char_table[256] = {    224,222,222,222,222,222,222,222,222,222,223,222,222,223,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,6,16,127,22,17,23,49,17,    145,145,129,80,80,0,0,18,0,0,0,0,0,0,0,0,0,0,16,87,    119,16,119,23,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,0,0,0,23,223,23,23,0,23,0,0,0,    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,23,23,23,17,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,    222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222 };</code></pre><p>最后，如果编译不通过，还是报错，根据错误找到原因，依次解决。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/bluestorm/p/3344803.html" target="_blank" rel="noopener">vs添加include，lib，dll库文件</a>  </p><p><a href="https://blog.csdn.net/tiger_xs/article/details/100038183" target="_blank" rel="noopener">编译ActiveMQ-CPP库遇到的那点事</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apr编译 </tag>
            
            <tag> apr-iconv编译 </tag>
            
            <tag> apr-util编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL 标准模板库</title>
      <link href="/2020/01/19/cpCPP-STL/"/>
      <url>/2020/01/19/cpCPP-STL/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>标准模板库（英文：Standard Template Library，缩写：STL），是一个C++软件库，其中包含4个组件，分别为算法、容器、函数、迭代器。模板是C++程序设计语言中的一个重要特征，而标准模板库正是基于此特征。标准模板库使得C++编程语言在有了同Java一样强大的类库的同时，保有了更大的可扩展性。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。 </p><p>STL 将“在数据上执行的操作”与“要执行操作的数据分开”，分别以如下概念指代：</p><p><strong>容器</strong>：包含、放置数据的地方。<br><strong>迭代器</strong>：在容器中指出一个位置、或成对使用以划定一个区域，用来限定操作所涉及到的数据范围。<br><strong>算法</strong>：要执行的操作。  </p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>标准模板库包含了序列容器（sequence containers）与关系容器（associative containers）。  </p><h3 id="序列容器–有序集"><a href="#序列容器–有序集" class="headerlink" title="序列容器–有序集"></a>序列容器–有序集</h3><p><strong>vector</strong>：<br>动态数组，兼容C语言数组。vector可以如同数组一样的访问方式，例如使用下标（operator[]）运算符，并记得自己的长度信息（size），您也可以使用对象的方式来访问vector（push_back、pop_back）。使用vector可以轻易地定义多维可调整型数组（std::vector&lt;std::vector&lt;…&gt; &gt;）。要使用vector，必须含入vector头文件。vector可在O(1)内完成在末尾插入/移除元素，但在vector中间或开头插入/移除元素，则需要消耗O(n)时间。  </p><p><strong>list</strong>：<br>list容器是一个有序（Ordered）的数据结构（循序容器），每个元素中存储着上一个元素和下一个元素的地址（指针），因此是一个双向链接的链表。与vector相比，其元素的访问速度较慢，而在已知元素位置的情况下，插入和删除速度较快。STL容器中唯一支持事务语义。  </p><p><strong>forward_list</strong>：单向链表，list的单链表版，去掉了一些操作。  </p><p><strong>deque</strong>: 双端队列，可看做为能在常量时间内完成向开头或结尾插入或删除元素的vector，但是修改之后，其迭代器的有效性就无法得到保障。  </p><p><strong>array</strong>：只能在初始化时指定大小的数组，可视为内置数组的封装。</p><h3 id="关联容器–无序集"><a href="#关联容器–无序集" class="headerlink" title="关联容器–无序集"></a>关联容器–无序集</h3><p><strong>set</strong>：不重复元素的集合。  </p><p><strong>multiset</strong>：跟set具有相同的功能，但允许重复的元素。  </p><p><strong>map</strong>: 关联数组，每个元素含有两个数据项，map将一个数据项映射到另一个数据项中。  </p><p><strong>multimap</strong>: 跟map具有相同功能，但允许重复的键值。</p><p><strong>unordered_set</strong><br><strong>unordered_multiset</strong><br><strong>unordered_map</strong><br><strong>unordered_multimap</strong>：<br>分别类似于集合、多重集合、映射、多重映射，但使用哈希表实现。它的键（Keys）没有排序（operator&lt;），相反必须存在一个从键类型到size_t的哈希函数、且要求键之间可以判等（operator==）。自C++11起进入语言标准。</p><h3 id="其他类型的容器"><a href="#其他类型的容器" class="headerlink" title="其他类型的容器"></a>其他类型的容器</h3><p><strong>bitset</strong>:存储系列位类似的固定大小的布尔向量。实现按位运算，没有迭代器，不是序列。可视为std::array&lt;bool, N&gt;。若需要改变序列长度，可用std::vector<bool>。  </bool></p><p><strong>valarray</strong>:<br>数值类型的std::vector。牺牲泛型能力而专为数值计算做了优化，例如在数组上的sin操作可对数组内所有数值取正弦。有些实现会对std::valarray应用向量指令等优化手段。<br>一个观点是里面全是数值类型的valarray才是数学意义上的向量，而可以泛型的vector更该叫array——编程语言中的数组。  </p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是泛化的指针，通过使用迭代器，开发者可以操作数据结构而无需关心其内部实现。根据迭代器的操作方式的不同，迭代器分为五种：</p><ul><li>输入迭代器</li><li>输出迭代器</li><li>前向迭代器</li><li>双向迭代器</li><li>随机访问迭代器</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>STL提供了一些常见 的算法，如排序和搜索等。这些算法与数据结构的实现进行了分离。因此，用于也可对自定义的数据结构使用这些算法，只需让这些自定义的数据结构拥有算法所预期的迭代器。  </p><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>狭义的函数对象即重载了操作符()的类的实例，而广义来讲所有可用 x(…) 形式调用的 x 都可称为函数对象、或曰可调用对象。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="noopener">维基百科–标准模板库</a><br><a href="https://github.com/Alinshans/MyTinySTL" target="_blank" rel="noopener">github–MyTinySTL</a>  </p><p><a href="https://www.twle.cn/l/yufei/cplusplus/cplusplus-basic-stl-tutorial.html" target="_blank" rel="noopener">C++ STL教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
            <tag> c++标准模板库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++构造类型</title>
      <link href="/2019/12/20/cpp-construction/"/>
      <url>/2019/12/20/cpp-construction/</url>
      
        <content type="html"><![CDATA[<h2 id="C-构造类型"><a href="#C-构造类型" class="headerlink" title="C++构造类型"></a>C++构造类型</h2><p>C++提供了多种基本的数据类型（int、char、double等）供用户使用，但是由于程序处理的问题往往比较复杂，而且呈现多样化，已有的基本数据类型很难满足使用要求。为了将不同类型的数据联合起来，作为一个整体进行处理，C++提供了结构体类型（structure）、共用体类型（union）、枚举类型（enumeration）、类类型（class）等，这样的类型成为构造类型。</p><h2 id="结构体类型"><a href="#结构体类型" class="headerlink" title="结构体类型"></a>结构体类型</h2><p><strong>C语言结构体与C++结构体的区别</strong>：  </p><p>C++中结构体类型是从C语言继承而来，是C语言中聚合数据类型(aggregate data type)的一类。结构体可以被声明为变量、指针或数组等，用以实现较复杂的数据结构。声明结构体类型的一般形式如下：</p><pre><code>struct 结构体名称{    数据类型1 成员1;    数据类型2 成员2;    .    .    .    数据类型n 成员n;}</code></pre><p>对于结构体成员，可以通过成员运算符”.”对其进行访问。</p><p>在C语言中的结构体只涉及到数据结构，而不涉及算法。换句话说C语言中的结构体只能定义成员变量，但不能定义成员函数。而C++对此加以扩充，结构体的成员既可以包括数据(即数据成员)，又可以包括函数(即函数成员)，以适应面向对象的程序设计。C++中的结构体和类体现了数据结构和算法的结合。  </p><p>既然C语言的结构体中只能包含成员变量，那么可不可以将指向函数的指针放到结构体中，这样是不是也能实现利用结构体来调用函数呢？答案是肯定的，看下面的例子：</p><pre><code>#include &lt;stdio.h&gt;//定义一个函数void myfun(int num){    printf("hello! %d\n", num);}//定义结构体typedef struct {    int num;    //指向一个函数的指针    void (*print)(int);}Student;//main函数int main() {    Student stu;    //初始化结构体    stu.num = 2015;    //让函数指针print指向myfun()函数    stu.print = &amp;myfun;    //调用函数    stu.print(stu.num);    return 0;}</code></pre><p><strong>C++结构体和类的区别</strong>：</p><p>C++结构体与类相似，也可以包含构造函数，常数，字段，方法，属性，索引器，运算符和嵌套类型等，不过，结构体是值类型。</p><p>概念：class和struct的语法基本相同，从声明到使用，都很相似，但是struct的约束要比class多，理论上，struct能做到的class都能做到，但class能做到的stuct却不一定做的到。</p><p>类型：struct是值类型，class是引用类型，因此它们具有所有值类型和引用类型之间的差异。</p><p>效率：由于堆栈的执行效率要比堆的执行效率高，但是堆栈资源却很有限，不适合处理逻辑复杂的大对象，因此struct常用来处理作为基类型对待的小对象，而class来处理某个商业逻辑。值类型的内存不由垃圾回收控制，作用域结束时，值类型会自行释放，减少了托管堆的压力，因此具有性能上的优势。因此，结构体没有析构函数。</p><p>关系：struct不仅能继承也能被继承 ，而且可以实现接口，不过Class可以完全扩展。内部结构有区别，struct只能添加带参的构造函数，不能使用abstract和protected等修饰符，不能初始化实例字段。</p><p>什么时候用结构体呢？结构体使用简单，并且很有用，但是要牢记：结构体在堆栈中创建，是值类型，而类是引用类型。每当需要一种经常使用的类型，而且大多数情况下该类型只是一些数据时，使用结构体能比使用类获得更佳性能。</p><p>结构体是值类型，所以会影响性能，但根据使用结构体的方式，这种影响可能是正面的，也可能是负面的。正面的影响是为结构体分配内存时，速度非常快，因为它们将内联或者保存在堆栈中。在结构体超出了作用域被删除时，速度也很快。另一方面，只要把结构体作为参数来传递或者把一个结构体赋给另一个结构体(例如A=B，其中A和B是结构体)，结构体的所有内容就被复制，而对于类，则只复制引用。这样，就会有性能损失，根据结构体的大小，性能损失也不同。注意，结构体主要用于小的数据结构。但当把结构作为参数传递给方法时，就应把它作为ref参数传递，以避免性能损失——此时只传递了结构在内存中的地址，这样传递速度就与在类中的传递速度一样快了。另一方面，如果这样做，就必须注意被调用的方法可以改变结构的值。</p><h2 id="共用体类型"><a href="#共用体类型" class="headerlink" title="共用体类型"></a>共用体类型</h2><p>有时在一组数据中，任何两个数据不会同时有效。例如，当学生和教师放在一个表中的时候，根据职业不同，若是学生，应输入学生的成绩，需要用实数存储；若是教师，则输入教师的工资，需要用整数存储。也就是说，某一时刻，两者只能选择其一，此时可以使用共用体类型来表示。声明共用体类型的一般形式如下：</p><pre><code>union 共用体名称{    数据类型1 成员1;    数据类型2 成员2;    .    .    .    数据类型n 成员n;}</code></pre><p><strong>共用体类型数据的特点</strong>：  </p><ol><li>使用共用体变量的目的是希望用同一个内存段存放几种不同类型的数据。但请注意：在每一瞬时只能存放其中一种，而不是同时存放几种。</li><li>能够访问的是共用体变量中最后一次被赋值的成员，在对一个新的成员赋值后原有的成员就失去作用。</li><li>共用体变量的地址和它的各成员的地址都是同一地址。</li><li>不能对共用体变量名赋值；不能企图引用变量名来得到一个值；不能在定义共用体变量时对它初始化；不能用共用体变量名作为函数参数。</li></ol><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举是用标识符表示的整型常量的集合。声明枚举类型的一般形式如下：</p><pre><code>enum 枚举类型名{枚举元素1, 枚举元素2 ,..., 枚举元素n};</code></pre><ol><li><p>枚举元素不能同名，若不指定枚举元素的起始值，系统将自动从0开始为每个枚举值设置初值，后面的枚举值依次加一。<br>若指定某个枚举元素的值，而下一个枚举元素没有指定值，那么其值是上一个枚举值增加一。<br>enum weekDays{Sun=7, Mon=1, Tue, Wed, Thu, Fri, Sat};<br>枚举元素Tue，Wed，Thu，Fri，Sat的值分别为2，3，4，5，6。</p></li><li><p>C++中定义枚举类型变量，可以不用关键字enum。</p></li><li><p>若声明无名枚举类型，枚举元素可以作为常量使用。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/0b6b0b774067" target="_blank" rel="noopener">C结构体、C++结构体和C++类的定义和区别</a>  </p><p><a href="https://blog.csdn.net/fengxinziyang/article/details/5909237" target="_blank" rel="noopener">C++结构体和类的区别</a>  </p><p><a href="https://blog.csdn.net/qsyzb/article/details/9896543" target="_blank" rel="noopener">C++结构体的定义、初始化和引用</a>  </p><p><a href="https://blog.csdn.net/Loving_Forever_/article/details/51483828" target="_blank" rel="noopener">详解C结构体、C++结构体 和 C++类的区别</a>  </p><p><a href="http://c.biancheng.net/cpp/biancheng/view/176.html" target="_blank" rel="noopener">C++共用体</a>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++构造类型 </tag>
            
            <tag> 结构体 </tag>
            
            <tag> 共用体 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++模板</title>
      <link href="/2019/12/19/cpp-template/"/>
      <url>/2019/12/19/cpp-template/</url>
      
        <content type="html"><![CDATA[<h2 id="C-模板"><a href="#C-模板" class="headerlink" title="C++模板"></a>C++模板</h2><p>模板是泛型编程的基础，泛型编程，即以一种独立于任何特定类型的方式编码。模板是创建泛型类或函数的蓝图或公式。C++中使用template关键字来定义模板。  </p><p>在理解泛型之前，首先我们需要了解什么时泛型编程，简单点来说，因为C++是一门强类型语言(静态语言)，所以无法做到像动态语言（python javascript等）那样子，编写一段通用的逻辑，可以把任意类型的变量传进去处理。泛型编程弥补了这个缺点，通过把通用逻辑设计为模板，摆脱了类型的限制，提供了继承机制以外的另一种抽象机制，极大地提升了代码的可重用性。</p><p><strong>模板</strong>：用来定义<strong>函数</strong>和<strong>类</strong>。使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成员函数的参数、返回值取得任意类型。  </p><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>函数模板针对仅参数类型不同的函数，通俗点讲就是，一个函数模板可以处理相同操作逻辑的多种数据类型，具体是什么类型的数据，是在调用函数时传入的参数类型决定的。<br>函数的模板一般形式如下所示：</p><pre><code>// implement strcmp-like generic compare function// returns 0 if the values are equal, 1 if v1 is larger, -1 if v1 is smallertemplate &lt;typename T&gt;int compare(const T &amp;v1, const T &amp;v2){    if (v1 &lt; v2) return -1;    if (v2 &lt; v1) return 1;    return 0;}</code></pre><p>模板定义以template关键字开始，后接模板形参表（template parameter list），模板形参表时用尖括号括住的一个或多个模板形参，形参之间以逗号分隔。</p><ol><li><p>模板形参列表<br> 模板形参表很像函数形参表，函数形参表定义了特定类型的局部变量但并不初始化那些变量，在运行时再提供实参来初始化形参。<br> 同样，模板形参可以是表示类型的<strong>类型形参</strong>，也可以是表示常量表达式的<strong>非类型形参（后面说明）</strong>。类型形参跟在关键字class和typename之后定义，例如，class T是名为T的类型形参，在这里class和typename没有区别。  </p></li><li><p>使用函数模板<br> 使用函数模板时，编译器会推断哪个（或哪些）<strong>模板实参</strong>绑定到模板形参。一旦编译器确定了实际的模板实参，就称它实例化了函数模板的一个实例。实际上，编译器将确定用什么类型代替每个类型形参，以及用什么值代替每个非类型形参。<br>对于以下的调用：</p></li></ol><pre><code>int main(){    //T is int    //compiler instantiates int compare(const int&amp;, const int&amp;)    cout &lt;&lt; compare(1,0) &lt;&lt; endl;    //T is string    //compiler instantiates int compare(const string &amp;, const string &amp;)    string s1 = "hi", s2 = "world";    cout &lt;&lt; compare(s1, s2) &lt;&lt; endl;    return 0;}</code></pre><ol start="3"><li>inline函数模板<br>函数模板可以用与非模板函数一样的方式声明为inline。说明符（inline）放在模板形参表（template &lt; typename T&gt;）之后、返回类型之前，不能放在关键字template之前。看下面的例子：</li></ol><pre><code>//ok:inline specifier follows template parameter listtemplate &lt;typename T&gt; inline T min(const T&amp;, const T&amp;);//error: incorrect placement of inline specifierinline template &lt;typename T&gt; T min(const T&amp;, const T&amp;);</code></pre><ol start="4"><li>成员函数模板<br>也可以为类成员函数定义模板，如下所示：</li></ol><pre><code>#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;class Printer {public:    template&lt;typename T&gt;    void print(const T&amp; t) {        cout &lt;&lt; t &lt;&lt;endl;    }};int main(){    Printer p;    p.print("abc");    p.print(56);    return 0;}</code></pre><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>就像定义模板函数，我们也可以定义类模板，类模板一般形式如下所示：</p><pre><code>template &lt;class type&gt; class class-name {//类主体}//使用方法class-name&lt;类型&gt; c;</code></pre><h2 id="模板形参"><a href="#模板形参" class="headerlink" title="模板形参"></a>模板形参</h2><p>像函数形参一样，程序员为模板形参选择的名字没有本质的含义。也就是说，模板形参惨的名称可以由程序员自己定义，如下所示都是合法的：</p><pre><code>template&lt;typename A&gt;template&lt;typename B&gt;</code></pre><p><strong>模板形参作用域</strong>：<br>模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。模板形参遵循常规名字屏蔽规则。与全局作用域中声明的对象、函数或类型同名的模板形参会屏蔽全局名字：</p><pre><code>typedef double T;template &lt;class T&gt; T calc(const T &amp;a, const T &amp;b){    //tmp has the type of the template parameter T    //not that of the global typedef    T tmp = a;    //..    return tmp;}</code></pre><p><strong>使用模板形参名字的限制</strong>：<br>用作模板形参的名字不能在模板内部重用：</p><pre><code>template &lt;class T&gt; T calc(const T &amp;a, const T &amp;b){    typedef double T; //error:redeclares template parameter T    T tmp = a;    // ...    return tmp;}</code></pre><p>这个限制还意味着模板形参的名字只能在同一模板形参表中使用一次：</p><pre><code>//error:illegal reuse of template parameter name vtemplate&lt;class v, class v&gt; v calc(const v&amp;, const v&amp;);</code></pre><p>当然，正如可以重用函数形参名字一样，模板形参的名字也能在不同模板中重用：</p><pre><code>template &lt;class T&gt; T calc(const T&amp;, const T&amp;);template &lt;class T&gt; T compare(const T&amp;, const T&amp;);</code></pre><p><strong>模板声明</strong>：<br>像其他任意函数或类一样，对于模板可以只声明而不定义。声明必须指出函数或类是一个模板：</p><pre><code>//declares compare but does not define ittemplate &lt;class T&gt; int compare(const T&amp;, const T&amp;);</code></pre><p>同一模板的声明和定义中，模板形参的名字不必相同：</p><pre><code>//all three uses of calc refer to the same function template//forward declarations of the templatetemplate &lt;class T&gt; T calc(const T&amp;, const T&amp;);template &lt;class U&gt; U calc(const U&amp;, const U&amp;);//actual definition of the templatetemplate &lt;class Type&gt;Type calc(const Type&amp; a, const Type&amp; b){...}</code></pre><p>每个模板类型形参前面必须带上关键字class或typename，每个非类型形参前面必须带上类型名字，省略关键字或类型说明符是错误的：</p><pre><code>//error:must precede U by either typename of classtemplate &lt;typename T, U&gt; T calc(const T&amp;, const U&amp;);</code></pre><h2 id="typename与class的区别"><a href="#typename与class的区别" class="headerlink" title="typename与class的区别"></a>typename与class的区别</h2><p>类型形参由关键字class或者typename后接说明符构成。在函数模板形参表中，关键字typename和class具有相同的含义，可以互换使用，两个关键字都可以在同一模板形参表中使用。使用关键字typename代替关键字class指定模板类型形参也许更为直观，毕竟，可以使用内置类型（非类类型）作为实际的类型形参，而且，typename更清楚的指明后面的名字是一个类型名。但是，关键字typename是作为标准C++的组成部分加入到C++中，因此旧的程序更有可能只用class关键字。<br>除了定义数据成员或者函数成员外，类还可以定义类型成员。考虑如下函数：</p><pre><code>template &lt;class Parm, class U&gt;Parm fcn(Parm* array, U value){    Parm::size_type *p; //If Parm::size_type is a type, then a declaration    //If Parm::size_type is an object, then multiplication}</code></pre><p>我们知道size_type必定是绑定到Parm的那个类型的成员，但我们不知道size_type是一个类型成员的名字还是一个数据成员的名字，默认情况下，编译器假定这样的名字指定数据成员，而不是类型。</p><p>如果希望编译器将size_type当作类型，则必须显式的告诉编译器这样做：</p><pre><code>template &lt;class Parm, class U&gt;Parm fcn(Parm&amp; array, U value){    typename Parm::size_type *p; //ok:declares p to be a pointer}</code></pre><p>通过在成员名前加上关键字typename作为前缀，可以告诉编译器将成员当作类型。</p><p>如果拿不准是否需要以typename指明一个名字是一个类型，那么指定它是一个好主意。在类型之前指定typename没有害处，因此，即使typename是不必要的，也没关系。</p><h2 id="非类型模板参数"><a href="#非类型模板参数" class="headerlink" title="非类型模板参数"></a>非类型模板参数</h2><p>模板形参不必都是类型。在调用函数时非类型形参将用值代替，值的类型在模板形参表中指定。例如，下面的函数模板声明了array_init是一个含有类型模板形参和一个非类型模板形参的函数模板。函数本身接受一个形参，该形参是数组的引用：</p><pre><code>//initialize elements of an array to zerotemplate &lt;class T, size_t N&gt; void array_init(T (&amp;parm)[N]){    for(size_t i = 0; i != N; ++i){        parm[i] = 0;    }}</code></pre><p>模板非类型形参是模板定义内部的常量值，在需要常量表达式的时候，可使用非类型形参。<br>当调用array_init时，编译器从数组实参计算非类型形参的值：</p><pre><code>int x[42];double y[10];array_init(x); //instantiates array_init(int(&amp;)[42])array_init(y); //instantiates array_init(double(&amp;)[10])</code></pre><p>对于上面的程序，编译器将实例化array_init的两个版本：第一个实例的形参绑定到int[42],另一个实例中的形参绑定到double[10]。对于模板的非类型形参而言，求值结果相同的表达式将认为是等价的。</p><pre><code>int x[42];const int sz = 40;int y[sz+2];array_init(x); //instantiates array_init(int(&amp;)[42])array_init(y); //equivalent instantiation</code></pre><p>接下来我们了解一下类模板的非类型形参：</p><pre><code>template&lt;int hi, int wid&gt;class Screen{public:    //template nontype parameters used to initialize data members    Screen():screen(hi * wid, '#'),cursor(0),height(hi),width(wid) {}    //...private:    std::string   screen;    std::string::size_type cursor;    std::string::size_type height,width;}</code></pre><p>这个模板有两个形参，均为非类型形参。当用户定义Screen对象时，必须为每个形参提供常量表达式以供使用。类在默认构造函数中使用这些形参设置默认Screen的尺寸。<br>像任意类模板一样，使用Screen类型时必须显式声明形参值：</p><pre><code>Screen&lt;24, 80&gt; hp2621; //screen 24 lines by 80 characters</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文大部分内容摘自：《C++ Primer》<br><a href="https://www.runoob.com/cplusplus/cpp-templates.html" target="_blank" rel="noopener">菜鸟教程–C++模板</a><br><a href="https://www.runoob.com/w3cnote/c-templates-detail.html" target="_blank" rel="noopener">菜鸟教程–C++模板详解</a><br><a href="https://blog.csdn.net/lcg910978041/article/details/50696196" target="_blank" rel="noopener">关于编译性语言、解释性语言和脚本语言,动态语言,静态语言的区别</a><br><a href="https://blog.csdn.net/lezardfu/article/details/56852043" target="_blank" rel="noopener">C++ Template 基础篇（一）：函数模板</a>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++模板 </tag>
            
            <tag> C++ template关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ extern关键字</title>
      <link href="/2019/12/16/ccpp-extern/"/>
      <url>/2019/12/16/ccpp-extern/</url>
      
        <content type="html"><![CDATA[<h2 id="C-C-extern关键字"><a href="#C-C-extern关键字" class="headerlink" title="C/C++ extern关键字"></a>C/C++ extern关键字</h2><p>本篇文章主要围绕一下几个问题对extern关键字进行说明。</p><ul><li>声明和定义</li><li>变量和函数的声明</li><li>extern和static</li><li>extern关键字与头文件的联系</li><li>extern “C”</li><li>extern和const</li></ul><h2 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h2><p><strong>变量声明</strong>：用于向程序表明变量的类型和名字。<strong>变量可以被声明多次</strong>。<br><strong>变量定义</strong>：用于为变量分配存储空间，还可为变量指定初始值。<strong>变量只能被定义一次</strong>。定义也是声明：当定义变量的时候我们声明了它的类型和名字。  </p><p> extern表示<strong>声明</strong>，可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。  </p><p> 通过上面的两句话我们很容易搞清楚这两个概念，但是有的时候即使搞清楚了他们之间的区别和联系，可是在真正编码时又会产生很多疑问。 </p><p> 首先我们知道变量的声明是需要extern关键字的，在声明变量的时候，这个extern必须添加在变量前。其次，定义变量的同时我们也声明了变量，但是extern关键字在定义变量的时候可以被省略(定义时，默认均省略)，所以有时会让你搞不清楚到底是声明还是定义。</p><h2 id="变量和函数的声明"><a href="#变量和函数的声明" class="headerlink" title="变量和函数的声明"></a>变量和函数的声明</h2><p>我们一定要牢记一句话，程序中的变量可以声明多次，但是只能定义一次。  </p><pre><code>extern int a; // 声明一个全局变量 aint a; // 定义一个全局变量 aint a = 0;    // 定义一个全局变量 a, 并给初值，extern int a = 0 ; // 定义一个全局变量 a 并给初值。此时，该语句相当于 int a = 0;</code></pre><p>当你要引用一个全局变量的时候，你就必须要声明，extern int a; 这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明。  </p><p>对于函数同样也是定义和声明，定义的时候用extern，说明这个函数是可以被外部引用的，声明的时候用extern说明这是一个声明。 但由于函数的定义和声明是有区别的，定义函数要有函数体，声明函数没有函数体(还有以分号结尾)，所以<strong>函数定义和声明时都可以将extern省略掉</strong>，反正其他文件也是知道这个函数是在其他地方定义的，所以不加extern也行。两者如此不同，所以省略了extern也不会有问题。</p><pre><code>/*.cpp文件*///定义一个函数int fun(void){      return 0;}</code></pre><pre><code>/*.h文件*///声明一个函数extern int fun(void);//声明一个函数可以省略extern</code></pre><h2 id="extern和static"><a href="#extern和static" class="headerlink" title="extern和static"></a>extern和static</h2><p>（1）extern表明声明一个变量，变量的定义在别的地方，在这里要使用那个变量。</p><p>（2）static 表示静态的变量，分配内存的时候，存储在静态区，不存储在栈上面。</p><p>static作用范围是内部连接的关系这和extern有点相反。它和对象本身是分开存储的，extern也是分开存储的，但是extern可以被其他的对象用extern引用，而static不可以，只允许对象本身用它。具体差别首先，static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量；其次，static修饰的全局变量声明与定义同时进行，也就是说当你在头文件中使用static声明了全局变量后，它也同时被定义了；最后，static修饰全局变量的作用域只能是本身的编译单元，也就是说它的“全局”只对本编译单元有效，其他编译单元则看不到它。</p><h2 id="extern关键字与头文件的联系"><a href="#extern关键字与头文件的联系" class="headerlink" title="extern关键字与头文件的联系"></a>extern关键字与头文件的联系</h2><p>首先说下头文件，其实头文件对计算机而言没什么作用，她只是在预编译时在 #include 的地方展开一下，没别的意义了，其实头文件主要是给别人看的。头文件就是对用户的说明，函数，参数，各种各样的接口的说明。所以，最好不要在头文件里定义什么东西。比如全局变量：</p><pre><code>/*.h文件*/int A;</code></pre><p>这里的 int A 是个全局变量的定义，所以如果这个头文件被多次引用的话，你的A会被重复定义，显示语法上错了。  </p><p><strong>程序模块化设计风格</strong>：</p><ol><li>不要把变量定义放入.h文件，这样容易导致重复定义错误。<br>永远不要在.h文件中定义变量。定义变量和声明变量的区别在于定义会产生内存分配的操作，是汇编阶段的概念；而声明则只是告诉包含该声明的模块在连接阶段从其它模块寻找外部函数和变量，所以我们在.h文件中一定要写声明，而不是定义。</li><li>尽量使用static关键字把变量定义限制于该源文件作用域，除非变量被设计成全局的。</li><li>可以在头文件中声明一个变量，在用的时候包含这个头文件就声明了这个变量。</li></ol><p><strong>模块化要点</strong>：</p><ol><li>模块即是一个.c文件和一个.h文件的结合，头文件(.h)中是对于该模块接口的声明。</li><li>某模块提供给其它模块调用的外部函数及数据需在.h中文件中冠以extern关键字声明，在.c文件中对变量和函数进行定义。在别的文件中使用全局变量和全局函数的时候，只需要在该文件中引入.h文件即可。</li><li>模块内的函数和全局变量需在.c文件开头冠以static关键字声明。</li><li>永远不要在.h文件中定义变量！定义变量和声明变量的区别在于定义会产生内存分配的操作，是汇编阶段的概念；而声明则只是告诉包含该声明的模块在连接阶段从其它模块寻找外部函数和变量。  </li></ol><p>注意：不过有三个例外，一下三中实体的定义也可放到头文件中。</p><pre><code>1.值在编译时就已知的const变量的定义可以放到头文件中如：const int num（10）;2.类的定义可以放到头文件中3.inline 函数</code></pre><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p>在C++环境下使用C函数的时候，常常会出现编译器无法找到obj模块中的C函数定义，从而导致链接失败的情况，应该如何解决这种情况呢？<br><strong>答案与分析</strong>：<br>　　C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。<br>下面是一个标准的写法：</p><pre><code>//在.h文件的头上#ifdef __cplusplus#if __cplusplusextern "C"{　#endif　#endif /* __cplusplus */　…　…　//.h文件结束的地方　#ifdef __cplusplus　#if __cplusplus}#endif#endif /* __cplusplus */ </code></pre><h2 id="extern和const"><a href="#extern和const" class="headerlink" title="extern和const"></a>extern和const</h2><p>C++中const修饰的全局常量具有跟static相同的特性，即它们只能作用于本编译模块中，且static修饰的是全局变量，但是const可以与extern连用来声明该常量可以作用于其他编译模块中,如：  extern const char g_str[];</p><p>然后在原文件中别忘了定义:const char g_str[] = “123456”;</p><p>所以当const单独使用时它就与static相同，而当与extern一起合作的时候，它的特性就跟extern的一样了！所以对const我没有什么可以过多的描述，需要注意的是，const char* g_str = “123456” 与 const char g_str[] =”123465”是不同的，前面那个const修饰的是char <em>而不是g_str,它的g_str并不是常量，它被看做是一个定义了的全局变量（可以被其他编译单元使用）， 所以如果你像让char</em> g_str遵守const的全局常量的规则，最好这么定义const char* const g_str=”123456”。<br>有关const关键字的知识，请参考<a href="https://anhua2015.github.io/2019/12/15/cc-const/" target="_blank" rel="noopener">C/C++ const关键字</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777431.html" target="_blank" rel="noopener">C/C++中extern关键字详解</a><br><a href="https://www.runoob.com/w3cnote/extern-head-h-different.html" target="_blank" rel="noopener">extern 与头文件(*.h)的区别和联系</a><br><a href="https://blog.csdn.net/z702143700/article/details/46805241" target="_blank" rel="noopener">深入理解extern用法</a><br><a href="https://blog.csdn.net/gatieme/article/details/50640424" target="_blank" rel="noopener">C语言中声明和定义详解</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ extern关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c/c++ const关键字</title>
      <link href="/2019/12/15/cc-const/"/>
      <url>/2019/12/15/cc-const/</url>
      
        <content type="html"><![CDATA[<h2 id="C-C-const关键字"><a href="#C-C-const关键字" class="headerlink" title="C/C++ const关键字"></a>C/C++ const关键字</h2><p>  在C语言和C++中经常要用到const关键字，最简单的用法是使用它定义常量，如果一个变量被const修饰，那么它的值就不能再被改变。这是const关键字最根本的功能。既然用它定义的变量不可变，那么他与#define有什么区别呢？</p><ol><li>const关键字定义的变量在堆栈中分配了空间，const修饰的常量是一个Run-Time的概念，变量在程序中确确实实的存在，可以被调用、传递。</li><li>#define只是在编译时只是对值简单的替换，不能进行类型检查，它是Compile-Time概念，他的生命周期止于编译器。</li><li>const可以保护被修饰的东西，防止恶意篡改。</li><li>具体不同的编译器存在一些差别。</li></ol><h3 id="一、修饰局部变量"><a href="#一、修饰局部变量" class="headerlink" title="一、修饰局部变量"></a>一、修饰局部变量</h3><pre><code>const int n = 5;int const n = 5;</code></pre><p> 上述两种写法完全一致，表示变量n定义完成后，不能再被修改，需要注意的是在使用const修饰变量时，一定要对变量进行初始化，否则之后就不能对其进行赋值了。<br> 在全局作用域里定义非const变量时，它在整个程序中都可以访问。如下所示：</p><pre><code>//file_1.cint counter; //definition//file_2.cextern int counter; //uses counter from file_1counter++; //increments counter defined in file_1</code></pre><p> 与其他变量不同，除非特别说明，在全局作用域声明的const变量是定义该对象的文件的局部变量。此变量只存在于那个文件当中，不能被其他文件访问。<br> 通过指定const变量为extern，就可以在整个程序中访问const对象。如下所示：</p><pre><code>//file_1.c//defines and initializes a const that is accessible to other filesextern const int bufSize = fcn();file_2.cextern const int bufSize;//uses bufSize from file_1</code></pre><p> 由此可知，非const变量默认为extern。要使const变量能够在其他文件中访问，必须显式地指定它为extern。</p><h3 id="二、const引用"><a href="#二、const引用" class="headerlink" title="二、const引用"></a>二、const引用</h3><p>const引用是指向const对象的引用：</p><pre><code>const int ival = 1024;const int &amp;refVal = ival;//ok,both reference and object are constint &amp;ref2 = ival; //error,nonconst reference to a const object</code></pre><p> 可以读取refVal但不能修改，因此，任何对refVal的修改都是不合法的。使用ival初始化ref2是不合法的，因为ref2是普通的非const引用。<br> 严格来说，“const引用”的意思是“指向const对象的引用”。“非const引用”表示指向非const类型的引用。<br> const引用可以初始化为不同类型的对象或者初始化为右值，如字面值常量：</p><pre><code>int i = 42;const int &amp;r = 42;const int &amp;r2 = r + i;</code></pre><p> 同样的初始化对于非const引用却是不合法的，而且会导致编译时错误。 </p><p> 观察将引用绑定到不同的类型时所发生的事情，最容易理解上述行为。加入我们编写：</p><pre><code>double dval = 3.14;const int &amp;ri = dval;</code></pre><p>编译器会把这些代码转化成如下：</p><pre><code>int temp = dval;const int &amp;ri = temp;</code></pre><p> 如果ri不是const，那么可以给ri赋一个新值。这样做不会修改dval，而是修改了temp。期望对ri的赋值会修改dval的程序员会发现dval并没有被修改。所以仅允许const引用绑定到需要临时使用的值完全避免了这个问题，因为const引用是只读的。</p><p>注解：</p><ol><li>非const引用只能绑定到与该引用同类型的对象。</li><li>const引用则可以绑定到不同但相关的类型的对象或绑定到右值。</li></ol><h3 id="三、指针和const限定符"><a href="#三、指针和const限定符" class="headerlink" title="三、指针和const限定符"></a>三、指针和const限定符</h3><h4 id="指向const对象的指针"><a href="#指向const对象的指针" class="headerlink" title="指向const对象的指针"></a>指向const对象的指针</h4><p> 指针可以用来修改其所指对象的值。但如果指针指向const对象，则不允许用指针来改变其所指向的const值。为了保证这个特性，c++语言强制要求指向const对象的指针也必须具有const特性：</p><pre><code>const double *cptr; //cptr may point to a double that is const</code></pre><p> 这里的cptr是一个指向double类型const对象的指针，<strong>const限定了cptr指针所指向的对象类型，而非cptr本身</strong>。<br>也就是说，cptr本身并不是const，在定义时不需要对他进行初始化，如果需要的话，允许给cptr从新赋值，使其指向另一个const对象。但不能通过cptr修改其所指向对象的值。<br> 把一个const对象的地址赋给一个普通的、非const对象的指针也会导致编译时的错误。</p><pre><code>const double pi = 3.14;double *ptr = &amp;pi; //error: ptr is a plain pointerconst double *cptr = &amp;pi; //ok:cptr is a pointer to const</code></pre><p> 不能使用void *指针保存const对象的地址，而必须使用const void *类型的指针保存const对象的地址：</p><pre><code>const int universe = 42;const void *cpv = &amp;universe; //okvoid *pv = &amp;universe; //error</code></pre><p> 允许把非const对象的地址赋给指向const对象的指针，例如：</p><pre><code>double dval = 3.14;const double cptr = &amp;dval;</code></pre><p>尽管dval不是const对象，但任何企图通过指针cptr修改其值的性唯都会导致编译时的错误。cptr一经定义，就不允许修改其所指对象的值。在实际的程序中，指向const的指针常用作函数的形参。将形参定义为指向const的指针，以此确保传递给函数的实际对象在函数中不因为形参而被修改。  </p><h4 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h4><p>除了指向const对象的的指针外，c++语言还提供了const指针—本身的值不能被修改。  </p><pre><code>int errNumb = 0;int *const curErr = &amp;errNumb; //curErr is a constant pointer</code></pre><p>const指针的值不能修改，这就意味着不能使curErr指向其他对象。</p><h4 id="指向const对象的const指针"><a href="#指向const对象的const指针" class="headerlink" title="指向const对象的const指针"></a>指向const对象的const指针</h4><p>知道了上面的两个概念，那么我们还可以如下定义指向const对象的const指针。</p><pre><code>const double pi = 3.14159;const double *const pi_ptr = &amp;pi;</code></pre><p>本例中，既不能修改pi_ptr所指向对象的值，也不允许修改该指针的指向。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>《C++ Primer》</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ const关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub高级检索</title>
      <link href="/2019/12/06/githubSearch/"/>
      <url>/2019/12/06/githubSearch/</url>
      
        <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>​    GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。GitHub对广大的开发者来说是个巨大的宝库，在GitHub上我们可以学习众多大佬优秀的思想以及他们所建造的轮子，同时也可以记录和分享自己的技术和经验。想要更好的使用GitHub这个宝库，那么学会GitHub的高级检索功能就显得至关重要。</p><p>GitHub官方文档： <a href="https://help.github.com/categories/search/" target="_blank" rel="noopener">github帮助页面</a></p><h3 id="官方文档摘抄"><a href="#官方文档摘抄" class="headerlink" title="官方文档摘抄"></a>官方文档摘抄</h3><p><strong>About searching on GitHub</strong><br>Use our powerful search tools to find what you’re looking for among the many repositories, users, and lines of code on GitHub.</p><h4 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h4><p><strong>Searching for repositories</strong><br>You can search for repositories on GitHub and narrow the results using these repository search qualifiers in any combination.</p><table><thead><tr><th>Qualifier</th><th>Example</th></tr></thead><tbody><tr><td><u>in:name</u></td><td>jquery in:name matches repositories with “jquery” in their name.</td></tr><tr><td><u>in:description</u></td><td>jquery in:name,description matches repositories with “jquery” in their name or description.</td></tr><tr><td><u>in:readme</u></td><td>jquery in:readme matches repositories mentioning “jquery” in their README file.</td></tr><tr><td>repo:owner/name</td><td>repo:octocat/hello-world matches a specific repository name.</td></tr><tr><td>user:USERNAME</td><td>user:defunkt forks:&gt;100 matches repositories from @defunkt that have more than 100 forks.</td></tr><tr><td>org:ORGNAME</td><td>org:github matches repositories from GitHub.</td></tr><tr><td>size:n</td><td>size:1000 matches repositories that are 1 MB exactly.size:&gt;=30000 matches repositories that are at least 30 MB.size:&lt;50 matches repositories that are smaller than 50 KB.size:50..120 matches repositories that are between 50 KB and 120 KB.</td></tr><tr><td>followers:n</td><td>node followers:&gt;=10000 matches repositories with 10,000 or more followers mentioning the word “node”. styleguide linter followers:1..10 matches repositories with between 1 and 10 followers, mentioning the word “styleguide linter.”</td></tr><tr><td>forks:n</td><td>forks:5 matches repositories with only five forks.forks:&gt;=205 matches repositories with at least 205 forks.forks:&lt;90 matches repositories with fewer than 90 forks.forks:10..20 matches repositories with 10 to 20 forks.</td></tr><tr><td>stars:n</td><td>stars:500 matches repositories with exactly 500 stars.stars:10..20 matches repositories 10 to 20 stars, that are smaller than 1000 KB.stars:&gt;=500 fork:true language:php matches repositories with the at least 500 stars, including forked ones, that are written in PHP.</td></tr><tr><td>created:YYYY-MM-DD</td><td>webos created:&lt;2011-01-01 matches repositories with the word “webos” that were created before 2011.</td></tr><tr><td>pushed:YYYY-MM-DD</td><td>css pushed:&gt;2013-02-01 matches repositories with the word “css” that were pushed to after January 2013.case pushed:&gt;=2013-03-06 fork:only matches repositories with the word “case” that were pushed to on or after March 6th, 2013, and that are forks.</td></tr><tr><td>language:LANGUAGE</td><td>rails language:javascript matches repositories with the word “rails” that are written in JavaScript.</td></tr><tr><td>topic:TOPIC</td><td>topic:jekyll matches repositories that have been classified with the topic “jekyll.”</td></tr><tr><td>topics:n</td><td>topics:5 matches repositories that have five topics.topics:&gt;3 matches repositories that have more than three topics.</td></tr><tr><td>license:LICENSE_KEYWORD</td><td>license:apache-2.0 matches repositories that are licensed under Apache License 2.0.</td></tr><tr><td>is:public</td><td>is:public org:github matches repositories owned by GitHub that are public.</td></tr><tr><td>is:private</td><td>is:private pages matches private repositories you have access to and that contain the word “pages.”</td></tr><tr><td>mirror:true</td><td>mirror:true GNOME matches repositories that are mirrors and contain the word “GNOME.”</td></tr><tr><td>mirror:false</td><td>mirror:false GNOME matches repositories that are not mirrors and contain the word “GNOME.”</td></tr><tr><td>archived:true</td><td>archived:true GNOME matches repositories that are archived and contain the word “GNOME.”</td></tr><tr><td>archived:false</td><td>archived:false GNOME matches repositories that are not archived and contain the word “GNOME.”</td></tr><tr><td>good-first-issues:&gt;n</td><td>good-first-issues:&gt;2 javascript matches repositories with more than two issues labeled good-first-issue and that contain the word “javascript.”</td></tr><tr><td>help-wanted-issues:&gt;n</td><td>help-wanted-issues:&gt;4 react matches repositories with more than four issues labeled help-wanted and that contain the word “React.”</td></tr></tbody></table><p>GitHub上按“shift + /”即可查看支持的快捷键，在项目中按”t”可以快速搜索文件。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/7321caea2a08" target="_blank" rel="noopener">GitHub搜索技巧</a></p><p><a href="https://link.jianshu.com/?t=https://github.com/trending" target="_blank" rel="noopener">GitHub Trending</a>：了解各种不同开发语言的每天/周/月的最热门的 Repositories 和 Developers。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub搜索 </tag>
            
            <tag> GitHub高级检索 </tag>
            
            <tag> GitHub advanced search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图详解</title>
      <link href="/2019/11/28/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/2019/11/28/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="UML类图简介"><a href="#UML类图简介" class="headerlink" title="UML类图简介"></a>UML类图简介</h3><h2 id="一、UML类图简介"><a href="#一、UML类图简介" class="headerlink" title="一、UML类图简介"></a>一、UML类图简介</h2><p>​    在UML建模中类图(Class diagram)主要是显示了模型的静态结构，特别是模型中存在的<strong>类</strong>、<strong>类的内部结构</strong>以及<strong>它们与其他类的关系</strong>等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。它既用于应用程序的系统分类的一般概念建模，也用于详细建模，将模型转换成编程代码。</p><p>​    类图中最基本的元素是类或者接口。</p><p>​    类图主要用在面向对象<strong>软件开发的分析和设计阶段</strong>，描述系统的静态结构。类图图示了所构建系统的所有实体、实体的内部结构以及实体之间的关系。即，类图中包含从用户的客观世界模型中抽象出来的类、类的内部结构和类与类之间的关系，它是构建其他设计模型的基础，没有类图，就没有<strong>对象图</strong>、<strong>状态图</strong>、<strong>协作图</strong>等其他UMI。动态模型图也就无法表示系统的动态行为。类图也是面向对象编程的起点和依据。类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人们简化对系统的理解，它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。</p><p> ——————以上来自百度百科。</p><h2 id="二、UML中类的表达方式"><a href="#二、UML中类的表达方式" class="headerlink" title="二、UML中类的表达方式"></a>二、UML中类的表达方式</h2><p>​    在UML类图中，一个类主要包含类名、属性以及方法。将三部分用矩形框起来并加上分割线就表示一个类。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%80.png" alt="图 1"></p><p>上图展示了枚举、接口以及类的表示方式，如果类的表示方式中蓝色部分的类名称使用斜体，则表示该类为抽象类。</p><p>实际上，属性的完整表示方式是这样的：</p><p><strong>可见性  名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式如下：</p><p><strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><p>其中，中括号中的内容是可选的。</p><p>属性前边的符号含义如下：</p><ul><li>-表示属性为private</li><li>+表示属性为public</li><li>#表示属性为 protected</li></ul><h2 id="三、类与类之间关系表示方式"><a href="#三、类与类之间关系表示方式" class="headerlink" title="三、类与类之间关系表示方式"></a>三、类与类之间关系表示方式</h2><h3 id="3-1-关联关系"><a href="#3-1-关联关系" class="headerlink" title="3.1 关联关系"></a>3.1 关联关系</h3><p>关联关系包括：单向关联、双向关联、自关联。</p><h4 id="3-1-1-单向关联"><a href="#3-1-1-单向关联" class="headerlink" title="3.1.1 单向关联"></a>3.1.1 单向关联</h4><p>定义：单向关联表示一个类A将另一个类B作为类内部的成员，类A可以调用类B中的公共属性和方法。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%8C.png" alt="图 2"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Consumer类持有一个类型为Address的成员变量类实现 。</p><h4 id="3-1-2-双向关联"><a href="#3-1-2-双向关联" class="headerlink" title="3.1.2 双向关联"></a>3.1.2 双向关联</h4><p>定义： 双向关联就是双方各自持有对方类型的成员变量 ，都可以调用对方的公共属性和方法。具体表示如下图：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%89.png" alt="图 3"></p><p>在UML类图中，双向关联用一个不带箭头的实线表示。上图中在Consumer类中维护一个Product[]数组，表示一个顾客购买了那些产品；在Product类中维护一个Consumer类型的成员变量表示这个产品被哪个顾客所购买。 </p><h4 id="3-1-3-自身关联"><a href="#3-1-3-自身关联" class="headerlink" title="3.1.3 自身关联"></a>3.1.3 自身关联</h4><p>定义：自身关联也叫反身关联，自己引用自己，带着一个自己的引用。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%9B%9B.png" alt="图 4"></p><p>自身关联在UML类图中用一个带有箭头且指向自身的实线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。 </p><h3 id="3-2-聚合关系"><a href="#3-2-聚合关系" class="headerlink" title="3.2 聚合关系"></a>3.2 聚合关系</h3><p>定义： 聚合用来表示集体与个体之间的关联关系 。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%94.png" alt="图 5"></p><p>UML中聚合关系用实线加空心菱形表示。聚合关系强调是“集体”包含“个体”，但是“个体”可以脱离“集体”而单独存在。比如上图中班级包含了学生，而学生脱离了班级也能单独存在。 </p><h3 id="3-3-组合关系"><a href="#3-3-组合关系" class="headerlink" title="3.3 组合关系"></a>3.3 组合关系</h3><p>定义： 组合又叫复合，用来表示个体与组成部分之间的关联关系， 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AD.png" alt="图 6"></p><p>组合关系与聚合关系见得最大不同在于：这里的“部分”脱离了“整体”便不复存在 。</p><p><strong>聚合与组合的对比：</strong><br>（1）聚合关系没有组合紧密。<br>学生不会因为班级的解散而无法存在，聚合关系的类具有不同的生命周期；而学生如果没有心脏将无法存活，组合关系的类具有相同的生命周期。</p><p>这个从构造函数可以看出。聚合类的构造函数中包含另一个类的实例作为参数，因为构造函数中传递另一个类的实例，因此学生可以脱离班级体独立存在。组合类的构造函数包含另一个类的实例化。因为在构造函数中进行实例化，因此两者紧密耦合在一起，同生同灭，学生不能脱离心脏而存在。</p><p>（2）信息的封装性不同。<br>在聚合关系中，客户端可以同时了解Classes类和Student类，因为他们是独立的。</p><p>在组合关系中，客户端只认识Student类，根本不知道Heart类的存在，因为心脏类被严密地封装在学生类中。</p><p>理解聚合与复合的区别，主要在于聚合的成员可独立，复合的成员必须依赖于整体才有意义。</p><h3 id="3-3-依赖关系"><a href="#3-3-依赖关系" class="headerlink" title="3.3 依赖关系"></a>3.3 依赖关系</h3><p>定义： 依赖关系是五种关系中耦合最小的一种关系。类A要完成某个功能引用了类B，则类A依赖类B。依赖在代码中主要体现为<strong>类A的某个成员函数的返回值、形参、局部变量或静态方法的调用，则表示类A引用了类B</strong>。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%83.png" alt="图 7"></p><p>Driver的drive方法只有传入了一个Car对象才能发挥作用，因此我们说Driver类依赖于Car类。在UML类图中，依赖关系用一条带有箭头的虚线表示。 </p><h3 id="3-4-继承关系"><a href="#3-4-继承关系" class="headerlink" title="3.4 继承关系"></a>3.4 继承关系</h3><p>定义： 继承关系对应的是extend关键字，如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”。继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AB.png" alt="图 8"></p><p>在UML类图中用带空心三角形的直线表示 。</p><h3 id="3-5-接口实现关系"><a href="#3-5-接口实现关系" class="headerlink" title="3.5 接口实现关系"></a>3.5 接口实现关系</h3><p>这种关系对应implement关键字，在UML类图中用带空心三角形的虚线表示。如下图中，Car类与Ship类都实现了Vehicle接口。</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B9%9D.png" alt="图 9"></p><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/shindo/p/5579191.html" target="_blank" rel="noopener">五分钟读懂UML类图</a></p><p><a href="https://blog.csdn.net/K346K346/article/details/59582926" target="_blank" rel="noopener">认识 UML 类关系——依赖、关联、聚合、组合、泛化</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML静态结构 </tag>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven基本配置---本地仓库+阿里云远程库</title>
      <link href="/2019/11/27/mavenSettings/"/>
      <url>/2019/11/27/mavenSettings/</url>
      
        <content type="html"><![CDATA[<h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>首先在maven主目录下创建一个文件夹用来做maven的本地仓库。<br>进入主目录下的/conf目录，编辑settings.xml文件，找到如图所示的位置：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE.png" alt="图片 1"><br>在此注释之下加入下面的内容：<br><localrepository>D:/studySoftware/apache-maven-3.6.3/pro</localrepository>，其中/pro为开始时所创建的文件夹。如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE2.png" alt="图片 2"></p><h3 id="配置阿里云远程库"><a href="#配置阿里云远程库" class="headerlink" title="配置阿里云远程库"></a>配置阿里云远程库</h3><p>由于访问国外的官方库可能速度会比较慢，在这里我们可以设置成国内的一些远程仓库，此处选用阿里云maven库。同样实在settings.xml配置文件中操作，首先找到<mirrors>标签，在此标签内添加如下内容：</mirrors></p><pre><code>&lt;mirror&gt;              &lt;id&gt;nexus-aliyun&lt;/id&gt;            &lt;name&gt;nexus-aliyun&lt;/name&gt;          &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;   </code></pre><p>如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE3.png" alt="图片 3"></p><p>ok，最后保存一下。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven本地仓库配置 </tag>
            
            <tag> maven添加阿里云远程仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo:Hello World</title>
      <link href="/2019/09/01/hello-world/"/>
      <url>/2019/09/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
