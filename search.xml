<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UML类图详解</title>
      <link href="/2019/11/28/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/2019/11/28/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="UML类图简介"><a href="#UML类图简介" class="headerlink" title="UML类图简介"></a>UML类图简介</h3><h2 id="一、UML类图简介"><a href="#一、UML类图简介" class="headerlink" title="一、UML类图简介"></a>一、UML类图简介</h2><p>​    在UML建模中类图(Class diagram)主要是显示了模型的静态结构，特别是模型中存在的<strong>类</strong>、<strong>类的内部结构</strong>以及<strong>它们与其他类的关系</strong>等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。它既用于应用程序的系统分类的一般概念建模，也用于详细建模，将模型转换成编程代码。</p><p>​    类图中最基本的元素是类或者接口。</p><p>​    类图主要用在面向对象<strong>软件开发的分析和设计阶段</strong>，描述系统的静态结构。类图图示了所构建系统的所有实体、实体的内部结构以及实体之间的关系。即，类图中包含从用户的客观世界模型中抽象出来的类、类的内部结构和类与类之间的关系，它是构建其他设计模型的基础，没有类图，就没有<strong>对象图</strong>、<strong>状态图</strong>、<strong>协作图</strong>等其他UMI。动态模型图也就无法表示系统的动态行为。类图也是面向对象编程的起点和依据。类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人们简化对系统的理解，它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。</p><p> ——————以上来自百度百科。</p><h2 id="二、UML中类的表达方式"><a href="#二、UML中类的表达方式" class="headerlink" title="二、UML中类的表达方式"></a>二、UML中类的表达方式</h2><p>​    在UML类图中，一个类主要包含类名、属性以及方法。将三部分用矩形框起来并加上分割线就表示一个类。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%80.png" alt="图 1"></p><p>上图展示了枚举、接口以及类的表示方式，如果类的表示方式中蓝色部分的类名称使用斜体，则表示该类为抽象类。</p><p>实际上，属性的完整表示方式是这样的：</p><p><strong>可见性  名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式如下：</p><p><strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><p>其中，中括号中的内容是可选的。</p><p>属性前边的符号含义如下：</p><ul><li>-表示属性为private</li><li>+表示属性为public</li><li>#表示属性为 protected</li></ul><h2 id="三、类与类之间关系表示方式"><a href="#三、类与类之间关系表示方式" class="headerlink" title="三、类与类之间关系表示方式"></a>三、类与类之间关系表示方式</h2><h3 id="3-1-关联关系"><a href="#3-1-关联关系" class="headerlink" title="3.1 关联关系"></a>3.1 关联关系</h3><p>关联关系包括：单向关联、双向关联、自关联。</p><h4 id="3-1-1-单向关联"><a href="#3-1-1-单向关联" class="headerlink" title="3.1.1 单向关联"></a>3.1.1 单向关联</h4><p>定义：单向关联表示一个类A将另一个类B作为类内部的成员，类A可以调用类B中的公共属性和方法。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%8C.png" alt="图 2"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Consumer类持有一个类型为Address的成员变量类实现 。</p><h4 id="3-1-2-双向关联"><a href="#3-1-2-双向关联" class="headerlink" title="3.1.2 双向关联"></a>3.1.2 双向关联</h4><p>定义： 双向关联就是双方各自持有对方类型的成员变量 ，都可以调用对方的公共属性和方法。具体表示如下图：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%89.png" alt="图 3"></p><p>在UML类图中，双向关联用一个不带箭头的实线表示。上图中在Consumer类中维护一个Product[]数组，表示一个顾客购买了那些产品；在Product类中维护一个Consumer类型的成员变量表示这个产品被哪个顾客所购买。 </p><h4 id="3-1-3-自身关联"><a href="#3-1-3-自身关联" class="headerlink" title="3.1.3 自身关联"></a>3.1.3 自身关联</h4><p>定义：自身关联也叫反身关联，自己引用自己，带着一个自己的引用。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%9B%9B.png" alt="图 4"></p><p>自身关联在UML类图中用一个带有箭头且指向自身的实线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。 </p><h3 id="3-2-聚合关系"><a href="#3-2-聚合关系" class="headerlink" title="3.2 聚合关系"></a>3.2 聚合关系</h3><p>定义： 聚合用来表示集体与个体之间的关联关系 。如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%BA%94.png" alt="图 5"></p><p>UML中聚合关系用实线加空心菱形表示。聚合关系强调是“集体”包含“个体”，但是“个体”可以脱离“集体”而单独存在。比如上图中班级包含了学生，而学生脱离了班级也能单独存在。 </p><h3 id="3-3-组合关系"><a href="#3-3-组合关系" class="headerlink" title="3.3 组合关系"></a>3.3 组合关系</h3><p>定义： 组合又叫复合，用来表示个体与组成部分之间的关联关系， 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AD.png" alt="图 6"></p><p>组合关系与聚合关系见得最大不同在于：这里的“部分”脱离了“整体”便不复存在 。</p><p><strong>聚合与组合的对比：</strong><br>（1）聚合关系没有组合紧密。<br>学生不会因为班级的解散而无法存在，聚合关系的类具有不同的生命周期；而学生如果没有心脏将无法存活，组合关系的类具有相同的生命周期。</p><p>这个从构造函数可以看出。聚合类的构造函数中包含另一个类的实例作为参数，因为构造函数中传递另一个类的实例，因此学生可以脱离班级体独立存在。组合类的构造函数包含另一个类的实例化。因为在构造函数中进行实例化，因此两者紧密耦合在一起，同生同灭，学生不能脱离心脏而存在。</p><p>（2）信息的封装性不同。<br>在聚合关系中，客户端可以同时了解Classes类和Student类，因为他们是独立的。</p><p>在组合关系中，客户端只认识Student类，根本不知道Heart类的存在，因为心脏类被严密地封装在学生类中。</p><p>理解聚合与复合的区别，主要在于聚合的成员可独立，复合的成员必须依赖于整体才有意义。</p><h3 id="3-3-依赖关系"><a href="#3-3-依赖关系" class="headerlink" title="3.3 依赖关系"></a>3.3 依赖关系</h3><p>定义： 依赖关系是五种关系中耦合最小的一种关系。类A要完成某个功能引用了类B，则类A依赖类B。依赖在代码中主要体现为<strong>类A的某个成员函数的返回值、形参、局部变量或静态方法的调用，则表示类A引用了类B</strong>。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B8%83.png" alt="图 7"></p><p>Driver的drive方法只有传入了一个Car对象才能发挥作用，因此我们说Driver类依赖于Car类。在UML类图中，依赖关系用一条带有箭头的虚线表示。 </p><h3 id="3-4-继承关系"><a href="#3-4-继承关系" class="headerlink" title="3.4 继承关系"></a>3.4 继承关系</h3><p>定义： 继承关系对应的是extend关键字，如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”。继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。 如下图所示：</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E5%85%AB.png" alt="图 8"></p><p>在UML类图中用带空心三角形的直线表示 。</p><h3 id="3-5-接口实现关系"><a href="#3-5-接口实现关系" class="headerlink" title="3.5 接口实现关系"></a>3.5 接口实现关系</h3><p>这种关系对应implement关键字，在UML类图中用带空心三角形的虚线表示。如下图中，Car类与Ship类都实现了Vehicle接口。</p><p><img src="/images/UML/%E7%B1%BB%E5%9B%BE/%E5%9B%BE%E4%B9%9D.png" alt="图 9"></p><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/shindo/p/5579191.html" target="_blank" rel="noopener">五分钟读懂UML类图</a></p><p><a href="https://blog.csdn.net/K346K346/article/details/59582926" target="_blank" rel="noopener">认识 UML 类关系——依赖、关联、聚合、组合、泛化</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML静态结构 </tag>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven基本配置---本地仓库+阿里云远程库</title>
      <link href="/2019/11/27/mavenSettings/"/>
      <url>/2019/11/27/mavenSettings/</url>
      
        <content type="html"><![CDATA[<h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>首先在maven主目录下创建一个文件夹用来做maven的本地仓库。<br>进入主目录下的/conf目录，编辑settings.xml文件，找到如图所示的位置：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE.png" alt="图片 1"><br>在此注释之下加入下面的内容：<br><localrepository>D:/studySoftware/apache-maven-3.6.3/pro</localrepository>，其中/pro为开始时所创建的文件夹。如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE2.png" alt="图片 2"></p><h3 id="配置阿里云远程库"><a href="#配置阿里云远程库" class="headerlink" title="配置阿里云远程库"></a>配置阿里云远程库</h3><p>由于访问国外的官方库可能速度会比较慢，在这里我们可以设置成国内的一些远程仓库，此处选用阿里云maven库。同样实在settings.xml配置文件中操作，首先找到<mirrors>标签，在此标签内添加如下内容：</mirrors></p><pre><code>&lt;mirror&gt;              &lt;id&gt;nexus-aliyun&lt;/id&gt;            &lt;name&gt;nexus-aliyun&lt;/name&gt;          &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;   </code></pre><p>如下图所示：<br><img src="/images/maven/maven%E9%85%8D%E7%BD%AE3.png" alt="图片 3"></p><p>ok，最后保存一下。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven本地仓库配置 </tag>
            
            <tag> maven添加阿里云远程仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo:Hello World</title>
      <link href="/2019/09/01/hello-world/"/>
      <url>/2019/09/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
